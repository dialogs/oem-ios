// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RxASDataSources
import AsyncDisplayKit
import Differentiator
import Foundation
@_exported import RxASDataSources
import RxCocoa
import RxSwift
import Swift
import UIKit
public enum AnimationTransition {
  case animated
  case reload
  public static func == (a: RxASDataSources.AnimationTransition, b: RxASDataSources.AnimationTransition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Reactive where Base : AsyncDisplayKit.ASCollectionNode {
  public func items<DataSource, O>(dataSource: DataSource) -> (O) -> RxSwift.Disposable where DataSource : AsyncDisplayKit.ASCollectionDataSource, DataSource : RxASDataSources.RxASCollectionDataSourceType, O : RxSwift.ObservableType, DataSource.Element == O.Element
}
extension Reactive where Base : AsyncDisplayKit.ASCollectionNode {
  public var dataSource: RxCocoa.DelegateProxy<AsyncDisplayKit.ASCollectionNode, AsyncDisplayKit.ASCollectionDataSource> {
    get
  }
  public func setDataSource(_ dataSource: AsyncDisplayKit.ASCollectionDataSource) -> RxSwift.Disposable
}
extension ASCollectionNode : RxASDataSources.SectionedNodeType {
  public func insertItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  public func deleteItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  public func moveItemAtIndexPath(_ from: Foundation.IndexPath, to: Foundation.IndexPath)
  public func reloadItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  public func insertSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  public func deleteSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  public func moveSection(_ from: Swift.Int, to: Swift.Int)
  public func reloadSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  public func performBatchUpdates<S>(_ changes: Differentiator.Changeset<S>, animated: Swift.Bool, animationConfiguration: RxASDataSources.RowAnimation) where S : Differentiator.SectionModelType
}
open class ASCollectionSectionedDataSource<S> : ObjectiveC.NSObject, AsyncDisplayKit.ASCollectionDataSource, AsyncDisplayKit.ASCommonCollectionDataSource, RxCocoa.SectionedViewDataSourceType where S : Differentiator.SectionModelType {
  public typealias I = S.Item
  public typealias Section = S
  public typealias ConfigureCell = (RxASDataSources.ASCollectionSectionedDataSource<S>, AsyncDisplayKit.ASCollectionNode, Foundation.IndexPath, RxASDataSources.ASCollectionSectionedDataSource<S>.I) -> AsyncDisplayKit.ASCellNode
  public typealias ConfigureCellBlock = (RxASDataSources.ASCollectionSectionedDataSource<S>, AsyncDisplayKit.ASCollectionNode, Foundation.IndexPath, RxASDataSources.ASCollectionSectionedDataSource<S>.I) -> AsyncDisplayKit.ASCellNodeBlock
  public typealias ConfigureSupplementaryView = (RxASDataSources.ASCollectionSectionedDataSource<S>, AsyncDisplayKit.ASCollectionNode, Swift.String, Foundation.IndexPath) -> AsyncDisplayKit.ASCellNode
  public typealias ConfigureSupplementaryViewBlock = (RxASDataSources.ASCollectionSectionedDataSource<S>, AsyncDisplayKit.ASCollectionNode, Swift.String, Foundation.IndexPath) -> AsyncDisplayKit.ASCellNodeBlock
  public typealias MoveItem = (RxASDataSources.ASCollectionSectionedDataSource<S>, Foundation.IndexPath, Foundation.IndexPath) -> Swift.Void
  public typealias CanMoveItemAtIndexPath = (RxASDataSources.ASCollectionSectionedDataSource<S>, Foundation.IndexPath) -> Swift.Bool
  public init(configureCell: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCell, configureSupplementaryView: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryView? = nil, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = { _, _, _ in () }, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = { _, _ in false })
  public init(configureCellBlock: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCellBlock, configureSupplementaryView: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryView? = nil, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = { _, _, _ in () }, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = { _, _ in false })
  public init(configureCell: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCell, configureSupplementaryViewBlock: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryViewBlock? = nil, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = { _, _, _ in () }, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = { _, _ in false })
  public init(configureCellBlock: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCellBlock, configureSupplementaryViewBlock: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryViewBlock? = nil, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = { _, _, _ in () }, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = { _, _ in false })
  public typealias SectionModelSnapshot = Differentiator.SectionModel<S, RxASDataSources.ASCollectionSectionedDataSource<S>.I>
  open var sectionModels: [S] {
    get
  }
  open subscript(section: Swift.Int) -> S {
    get
  }
  open subscript(indexPath: Foundation.IndexPath) -> RxASDataSources.ASCollectionSectionedDataSource<S>.I {
    get
    set(item)
  }
  open func model(at indexPath: Foundation.IndexPath) throws -> Any
  open func setSections(_ sections: [S])
  open var configureCell: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCell {
    get
    set
  }
  open var configureCellBlock: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCellBlock {
    get
    set
  }
  open var configureSupplementaryView: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryView? {
    get
    set
  }
  open var configureSupplementaryViewBlock: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryViewBlock? {
    get
    set
  }
  open var moveItem: RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem {
    get
    set
  }
  open var canMoveItemAtIndexPath: RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath {
    get
    set
  }
  @objc open func numberOfSections(in collectionNode: AsyncDisplayKit.ASCollectionNode) -> Swift.Int
  @objc open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, nodeForItemAt indexPath: Foundation.IndexPath) -> AsyncDisplayKit.ASCellNode
  @objc open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, nodeBlockForItemAt indexPath: Foundation.IndexPath) -> AsyncDisplayKit.ASCellNodeBlock
  @objc open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, nodeForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> AsyncDisplayKit.ASCellNode
  @objc open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, nodeBlockForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> AsyncDisplayKit.ASCellNodeBlock
  open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, canMoveItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, moveItemAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init()
}
extension Reactive where Base : AsyncDisplayKit.ASTableNode {
  public func items<DataSource, O>(dataSource: DataSource) -> (O) -> RxSwift.Disposable where DataSource : AsyncDisplayKit.ASTableDataSource, DataSource : RxASDataSources.RxASTableDataSourceType, O : RxSwift.ObservableType, DataSource.Element == O.Element
}
extension Reactive where Base : AsyncDisplayKit.ASTableNode {
  public var dataSource: RxCocoa.DelegateProxy<AsyncDisplayKit.ASTableNode, AsyncDisplayKit.ASTableDataSource> {
    get
  }
  public func setDataSource(_ dataSource: AsyncDisplayKit.ASTableDataSource) -> RxSwift.Disposable
}
extension ASTableNode : RxASDataSources.SectionedNodeType {
  public func insertItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  public func deleteItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  public func moveItemAtIndexPath(_ from: Foundation.IndexPath, to: Foundation.IndexPath)
  public func reloadItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  public func insertSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  public func deleteSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  public func moveSection(_ from: Swift.Int, to: Swift.Int)
  public func reloadSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  public func performBatchUpdates<S>(_ changes: Differentiator.Changeset<S>, animated: Swift.Bool, animationConfiguration: RxASDataSources.RowAnimation) where S : Differentiator.SectionModelType
}
open class ASTableSectionedDataSource<S> : ObjectiveC.NSObject, AsyncDisplayKit.ASTableDataSource, AsyncDisplayKit.ASCommonTableDataSource, RxCocoa.SectionedViewDataSourceType where S : Differentiator.SectionModelType {
  public typealias I = S.Item
  public typealias Section = S
  public typealias ConfigureCell = (RxASDataSources.ASTableSectionedDataSource<S>, AsyncDisplayKit.ASTableNode, Foundation.IndexPath, RxASDataSources.ASTableSectionedDataSource<S>.I) -> AsyncDisplayKit.ASCellNode
  public typealias ConfigureCellBlock = (RxASDataSources.ASTableSectionedDataSource<S>, AsyncDisplayKit.ASTableNode, Foundation.IndexPath, RxASDataSources.ASTableSectionedDataSource<S>.I) -> AsyncDisplayKit.ASCellNodeBlock
  public typealias TitleForHeaderInSection = (RxASDataSources.ASTableSectionedDataSource<S>, Swift.Int) -> Swift.String?
  public typealias TitleForFooterInSection = (RxASDataSources.ASTableSectionedDataSource<S>, Swift.Int) -> Swift.String?
  public typealias CanEditRowAtIndexPath = (RxASDataSources.ASTableSectionedDataSource<S>, Foundation.IndexPath) -> Swift.Bool
  public typealias CanMoveRowAtIndexPath = (RxASDataSources.ASTableSectionedDataSource<S>, Foundation.IndexPath) -> Swift.Bool
  public typealias SectionIndexTitles = (RxASDataSources.ASTableSectionedDataSource<S>) -> [Swift.String]?
  public typealias SectionForSectionIndexTitle = (RxASDataSources.ASTableSectionedDataSource<S>, Swift.String, Swift.Int) -> Swift.Int
  public init(configureCell: @escaping RxASDataSources.ASTableSectionedDataSource<S>.ConfigureCell, titleForHeaderInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForHeaderInSection = { _, _ in nil }, titleForFooterInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForFooterInSection = { _, _ in nil }, canEditRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanEditRowAtIndexPath = { _, _ in false }, canMoveRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanMoveRowAtIndexPath = { _, _ in false }, sectionIndexTitles: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionIndexTitles = { _ in nil }, sectionForSectionIndexTitle: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionForSectionIndexTitle = { _, _, index in index })
  public init(configureCellBlock: @escaping RxASDataSources.ASTableSectionedDataSource<S>.ConfigureCellBlock, titleForHeaderInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForHeaderInSection = { _, _ in nil }, titleForFooterInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForFooterInSection = { _, _ in nil }, canEditRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanEditRowAtIndexPath = { _, _ in false }, canMoveRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanMoveRowAtIndexPath = { _, _ in false }, sectionIndexTitles: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionIndexTitles = { _ in nil }, sectionForSectionIndexTitle: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionForSectionIndexTitle = { _, _, index in index })
  public typealias SectionModelSnapshot = Differentiator.SectionModel<S, RxASDataSources.ASTableSectionedDataSource<S>.I>
  open var sectionModels: [S] {
    get
  }
  open subscript(section: Swift.Int) -> S {
    get
  }
  open subscript(indexPath: Foundation.IndexPath) -> RxASDataSources.ASTableSectionedDataSource<S>.I {
    get
    set(item)
  }
  open func model(at indexPath: Foundation.IndexPath) throws -> Any
  open func setSections(_ sections: [S])
  open var configureCell: RxASDataSources.ASTableSectionedDataSource<S>.ConfigureCell {
    get
    set
  }
  open var configureCellBlock: RxASDataSources.ASTableSectionedDataSource<S>.ConfigureCellBlock {
    get
    set
  }
  open var titleForHeaderInSection: RxASDataSources.ASTableSectionedDataSource<S>.TitleForHeaderInSection {
    get
    set
  }
  open var titleForFooterInSection: RxASDataSources.ASTableSectionedDataSource<S>.TitleForFooterInSection {
    get
    set
  }
  open var canEditRowAtIndexPath: RxASDataSources.ASTableSectionedDataSource<S>.CanEditRowAtIndexPath {
    get
    set
  }
  open var canMoveRowAtIndexPath: RxASDataSources.ASTableSectionedDataSource<S>.CanMoveRowAtIndexPath {
    get
    set
  }
  open var sectionIndexTitles: RxASDataSources.ASTableSectionedDataSource<S>.SectionIndexTitles {
    get
    set
  }
  open var sectionForSectionIndexTitle: RxASDataSources.ASTableSectionedDataSource<S>.SectionForSectionIndexTitle {
    get
    set
  }
  @objc open func numberOfSections(in tableNode: AsyncDisplayKit.ASTableNode) -> Swift.Int
  @objc open func tableNode(_ tableNode: AsyncDisplayKit.ASTableNode, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func tableNode(_ tableNode: AsyncDisplayKit.ASTableNode, nodeForRowAt indexPath: Foundation.IndexPath) -> AsyncDisplayKit.ASCellNode
  @objc open func tableNode(_ tableNode: AsyncDisplayKit.ASTableNode, nodeBlockForRowAt indexPath: Foundation.IndexPath) -> AsyncDisplayKit.ASCellNodeBlock
  @objc open func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc open func tableView(_ tableView: UIKit.UITableView, titleForFooterInSection section: Swift.Int) -> Swift.String?
  @objc open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc open func tableView(_ tableView: UIKit.UITableView, canMoveRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc open func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @objc open func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init()
}
open class RxASCollectionAnimatedDataSource<S> : RxASDataSources.ASCollectionSectionedDataSource<S>, RxASDataSources.RxASCollectionDataSourceType where S : Differentiator.AnimatableSectionModelType {
  public typealias Element = [S]
  public typealias AnimationType = (RxASDataSources.ASCollectionSectionedDataSource<S>, AsyncDisplayKit.ASCollectionNode, [Differentiator.Changeset<S>]) -> RxASDataSources.AnimationTransition
  public var animationConfiguration: RxASDataSources.RowAnimation
  public var animationType: RxASDataSources.RxASCollectionAnimatedDataSource<S>.AnimationType
  public var animated: Swift.Bool
  public init(animationConfiguration: RxASDataSources.RowAnimation = RowAnimation(), animationType: @escaping RxASDataSources.RxASCollectionAnimatedDataSource<S>.AnimationType = { _, _, _ in .animated }, configureCell: @escaping RxASDataSources.RxASCollectionAnimatedDataSource<S>.ConfigureCell, configureSupplementaryView: RxASDataSources.RxASCollectionAnimatedDataSource<S>.ConfigureSupplementaryView? = nil, moveItem: @escaping RxASDataSources.RxASCollectionAnimatedDataSource<S>.MoveItem = { _, _, _ in () }, canMoveItemAtIndexPath: @escaping RxASDataSources.RxASCollectionAnimatedDataSource<S>.CanMoveItemAtIndexPath = { _, _ in false })
  open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, observedEvent: RxSwift.Event<RxASDataSources.RxASCollectionAnimatedDataSource<S>.Element>)
  @objc deinit
  override public init(configureCell: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCell, configureSupplementaryView: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryView? = super, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = super, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = super)
  override public init(configureCellBlock: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCellBlock, configureSupplementaryView: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryView? = super, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = super, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = super)
  override public init(configureCell: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCell, configureSupplementaryViewBlock: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryViewBlock? = super, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = super, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = super)
  override public init(configureCellBlock: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCellBlock, configureSupplementaryViewBlock: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryViewBlock? = super, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = super, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = super)
}
extension ASCollectionNode : RxCocoa.HasDataSource {
  public typealias DataSource = AsyncDisplayKit.ASCollectionDataSource
}
public protocol RxASCollectionDataSourceType {
  associatedtype Element
  func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, observedEvent: RxSwift.Event<Self.Element>)
}
extension ASCollectionNode : RxCocoa.HasDelegate {
  public typealias Delegate = AsyncDisplayKit.ASCollectionDelegate
}
extension Reactive where Base : AsyncDisplayKit.ASCollectionNode {
  public var delegate: RxCocoa.DelegateProxy<AsyncDisplayKit.ASCollectionNode, AsyncDisplayKit.ASCollectionDelegate> {
    get
  }
  public var itemSelected: RxCocoa.ControlEvent<Foundation.IndexPath> {
    get
  }
  public var itemDeselected: RxCocoa.ControlEvent<Foundation.IndexPath> {
    get
  }
  public var itemHighlighted: RxCocoa.ControlEvent<Foundation.IndexPath> {
    get
  }
  public var itemUnhighlighted: RxCocoa.ControlEvent<Foundation.IndexPath> {
    get
  }
  public var willDisplayItem: RxCocoa.ControlEvent<AsyncDisplayKit.ASCellNode> {
    get
  }
  public var willDisplaySupplementaryElement: RxCocoa.ControlEvent<AsyncDisplayKit.ASCellNode> {
    get
  }
  public var didEndDisplayingItem: RxCocoa.ControlEvent<AsyncDisplayKit.ASCellNode> {
    get
  }
  public var didEndDisplayingSupplementaryElement: RxCocoa.ControlEvent<AsyncDisplayKit.ASCellNode> {
    get
  }
  public var willBeginBatchFetch: RxCocoa.ControlEvent<AsyncDisplayKit.ASBatchContext> {
    get
  }
  public func modelSelected<T>(_ modelType: T.Type) -> RxCocoa.ControlEvent<T>
  public func modelDeselected<T>(_ modelType: T.Type) -> RxCocoa.ControlEvent<T>
  public func model<T>(at indexPath: Foundation.IndexPath) throws -> T
}
@_inheritsConvenienceInitializers open class RxASCollectionReloadDataSource<S> : RxASDataSources.ASCollectionSectionedDataSource<S>, RxASDataSources.RxASCollectionDataSourceType where S : Differentiator.SectionModelType {
  public typealias Element = [S]
  open func collectionNode(_ collectionNode: AsyncDisplayKit.ASCollectionNode, observedEvent: RxSwift.Event<RxASDataSources.RxASCollectionReloadDataSource<S>.Element>)
  @objc deinit
  override public init(configureCell: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCell, configureSupplementaryView: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryView? = super, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = super, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = super)
  override public init(configureCellBlock: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCellBlock, configureSupplementaryView: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryView? = super, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = super, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = super)
  override public init(configureCell: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCell, configureSupplementaryViewBlock: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryViewBlock? = super, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = super, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = super)
  override public init(configureCellBlock: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureCellBlock, configureSupplementaryViewBlock: RxASDataSources.ASCollectionSectionedDataSource<S>.ConfigureSupplementaryViewBlock? = super, moveItem: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.MoveItem = super, canMoveItemAtIndexPath: @escaping RxASDataSources.ASCollectionSectionedDataSource<S>.CanMoveItemAtIndexPath = super)
}
open class RxASTableAnimatedDataSource<S> : RxASDataSources.ASTableSectionedDataSource<S>, RxASDataSources.RxASTableDataSourceType where S : Differentiator.AnimatableSectionModelType {
  public typealias Element = [S]
  public typealias AnimationType = (RxASDataSources.ASTableSectionedDataSource<S>, AsyncDisplayKit.ASTableNode, [Differentiator.Changeset<S>]) -> RxASDataSources.AnimationTransition
  public var animationConfiguration: RxASDataSources.RowAnimation
  public var animationType: RxASDataSources.RxASTableAnimatedDataSource<S>.AnimationType
  public var animated: Swift.Bool
  public init(animationConfiguration: RxASDataSources.RowAnimation = RowAnimation(), animationType: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.AnimationType = { _, _, _ in .animated }, configureCell: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.ConfigureCell, titleForHeaderInSection: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.TitleForHeaderInSection = { _, _ in nil }, titleForFooterInSection: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.TitleForFooterInSection = { _, _ in nil }, canEditRowAtIndexPath: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.CanEditRowAtIndexPath = { _, _ in false }, canMoveRowAtIndexPath: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.CanMoveRowAtIndexPath = { _, _ in false }, sectionIndexTitles: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.SectionIndexTitles = { _ in nil }, sectionForSectionIndexTitle: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.SectionForSectionIndexTitle = { _, _, index in index })
  public init(animationConfiguration: RxASDataSources.RowAnimation = RowAnimation(), animationType: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.AnimationType = { _, _, _ in .animated }, configureCellBlock: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.ConfigureCellBlock, titleForHeaderInSection: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.TitleForHeaderInSection = { _, _ in nil }, titleForFooterInSection: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.TitleForFooterInSection = { _, _ in nil }, canEditRowAtIndexPath: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.CanEditRowAtIndexPath = { _, _ in false }, canMoveRowAtIndexPath: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.CanMoveRowAtIndexPath = { _, _ in false }, sectionIndexTitles: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.SectionIndexTitles = { _ in nil }, sectionForSectionIndexTitle: @escaping RxASDataSources.RxASTableAnimatedDataSource<S>.SectionForSectionIndexTitle = { _, _, index in index })
  open func tableNode(_ tableNode: AsyncDisplayKit.ASTableNode, observedEvent: RxSwift.Event<RxASDataSources.RxASTableAnimatedDataSource<S>.Element>)
  @objc deinit
  override public init(configureCell: @escaping RxASDataSources.ASTableSectionedDataSource<S>.ConfigureCell, titleForHeaderInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForHeaderInSection = super, titleForFooterInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForFooterInSection = super, canEditRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanEditRowAtIndexPath = super, canMoveRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanMoveRowAtIndexPath = super, sectionIndexTitles: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionIndexTitles = super, sectionForSectionIndexTitle: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionForSectionIndexTitle = super)
  override public init(configureCellBlock: @escaping RxASDataSources.ASTableSectionedDataSource<S>.ConfigureCellBlock, titleForHeaderInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForHeaderInSection = super, titleForFooterInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForFooterInSection = super, canEditRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanEditRowAtIndexPath = super, canMoveRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanMoveRowAtIndexPath = super, sectionIndexTitles: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionIndexTitles = super, sectionForSectionIndexTitle: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionForSectionIndexTitle = super)
}
extension ASTableNode : RxCocoa.HasDataSource {
  public typealias DataSource = AsyncDisplayKit.ASTableDataSource
}
public protocol RxASTableDataSourceType {
  associatedtype Element
  func tableNode(_ tableNode: AsyncDisplayKit.ASTableNode, observedEvent: RxSwift.Event<Self.Element>)
}
extension ASTableNode : RxCocoa.HasDelegate {
  public typealias Delegate = AsyncDisplayKit.ASTableDelegate
}
extension Reactive where Base : AsyncDisplayKit.ASTableNode {
  public var delegate: RxCocoa.DelegateProxy<AsyncDisplayKit.ASTableNode, AsyncDisplayKit.ASTableDelegate> {
    get
  }
  public var itemSelected: RxCocoa.ControlEvent<Foundation.IndexPath> {
    get
  }
  public var itemDeselected: RxCocoa.ControlEvent<Foundation.IndexPath> {
    get
  }
  public var itemInserted: RxCocoa.ControlEvent<Foundation.IndexPath> {
    get
  }
  public var itemDeleted: RxCocoa.ControlEvent<Foundation.IndexPath> {
    get
  }
  public var itemMoved: RxCocoa.ControlEvent<RxCocoa.ItemMovedEvent> {
    get
  }
  public var willDisplayCell: RxCocoa.ControlEvent<AsyncDisplayKit.ASCellNode> {
    get
  }
  public var didEndDisplayingCell: RxCocoa.ControlEvent<AsyncDisplayKit.ASCellNode> {
    get
  }
  public var willBeginBatchFetch: RxCocoa.ControlEvent<AsyncDisplayKit.ASBatchContext> {
    get
  }
  public func modelSelected<T>(_ modelType: T.Type) -> RxCocoa.ControlEvent<T>
  public func modelDeselected<T>(_ modelType: T.Type) -> RxCocoa.ControlEvent<T>
  public func modelDeleted<T>(_ modelType: T.Type) -> RxCocoa.ControlEvent<T>
  public func model<T>(at indexPath: Foundation.IndexPath) throws -> T
}
@_inheritsConvenienceInitializers open class RxASTableReloadDataSource<S> : RxASDataSources.ASTableSectionedDataSource<S>, RxASDataSources.RxASTableDataSourceType where S : Differentiator.SectionModelType {
  public typealias Element = [S]
  open func tableNode(_ tableNode: AsyncDisplayKit.ASTableNode, observedEvent: RxSwift.Event<RxASDataSources.RxASTableReloadDataSource<S>.Element>)
  @objc deinit
  override public init(configureCell: @escaping RxASDataSources.ASTableSectionedDataSource<S>.ConfigureCell, titleForHeaderInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForHeaderInSection = super, titleForFooterInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForFooterInSection = super, canEditRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanEditRowAtIndexPath = super, canMoveRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanMoveRowAtIndexPath = super, sectionIndexTitles: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionIndexTitles = super, sectionForSectionIndexTitle: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionForSectionIndexTitle = super)
  override public init(configureCellBlock: @escaping RxASDataSources.ASTableSectionedDataSource<S>.ConfigureCellBlock, titleForHeaderInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForHeaderInSection = super, titleForFooterInSection: @escaping RxASDataSources.ASTableSectionedDataSource<S>.TitleForFooterInSection = super, canEditRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanEditRowAtIndexPath = super, canMoveRowAtIndexPath: @escaping RxASDataSources.ASTableSectionedDataSource<S>.CanMoveRowAtIndexPath = super, sectionIndexTitles: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionIndexTitles = super, sectionForSectionIndexTitle: @escaping RxASDataSources.ASTableSectionedDataSource<S>.SectionForSectionIndexTitle = super)
}
public struct RowAnimation {
  public let insertAnimation: UIKit.UITableView.RowAnimation
  public let reloadAnimation: UIKit.UITableView.RowAnimation
  public let deleteAnimation: UIKit.UITableView.RowAnimation
  public init(insertAnimation: UIKit.UITableView.RowAnimation = .automatic, reloadAnimation: UIKit.UITableView.RowAnimation = .automatic, deleteAnimation: UIKit.UITableView.RowAnimation = .automatic)
}
public protocol SectionedNodeType {
  func insertItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  func deleteItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  func moveItemAtIndexPath(_ from: Foundation.IndexPath, to: Foundation.IndexPath)
  func reloadItemsAtIndexPaths(_ paths: [Foundation.IndexPath], animationStyle: UIKit.UITableView.RowAnimation)
  func insertSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  func deleteSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  func moveSection(_ from: Swift.Int, to: Swift.Int)
  func reloadSections(_ sections: [Swift.Int], animationStyle: UIKit.UITableView.RowAnimation)
  func performBatchUpdates<S>(_ changes: Differentiator.Changeset<S>, animated: Swift.Bool, animationConfiguration: RxASDataSources.RowAnimation) where S : Differentiator.SectionModelType
}
extension RxASDataSources.AnimationTransition : Swift.Equatable {}
extension RxASDataSources.AnimationTransition : Swift.Hashable {}
