// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DialogMetrics
@_exported import DialogMetrics
import DialogNetService
import DialogNetworking
import DialogProtocols
import DialogSDK_GRPC
import DialogSecureStorage
import DialogStorage
import DialogSwiftGRPCExtra
import Foundation
import GRDB
import RxRelay
import RxSwift
import Swift
import SwiftGRPC
import SwiftProtobuf
public struct DialogContextMetric : Swift.Codable {
  public init(context: [Swift.String : Swift.String])
  public func map() -> DialogSDK_GRPC.Clickroad_TrackContext
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DialogErrorMetric : Swift.Codable {
  public init(message: Swift.String, fatal: Swift.Bool)
  public func map() -> DialogSDK_GRPC.Clickroad_TrackError
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol DialogEventsConvertible {
  func convert() -> [DialogMetrics.DialogMetricStoragableEvent]
}
public struct DialogMetricStoragableEvent : DialogStorage.DialogStoragableProtocol {
  public init(metric: DialogMetrics.DialogMetric, uid: Swift.String = UUID().uuidString, timestamp: Foundation.TimeInterval = Date().timeIntervalSince1970)
  public func requireToCreateTable(in database: GRDB.Database) throws
  public func isContext() -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogMetricStoragableEvent : Swift.Equatable {
  public static func == (lhs: DialogMetrics.DialogMetricStoragableEvent, rhs: DialogMetrics.DialogMetricStoragableEvent) -> Swift.Bool
}
public struct DialogEventMetric : Swift.Codable {
  public init(category: DialogMetrics.DialogEventMetric.Category, action: DialogMetrics.DialogEventMetric.Action, label: DialogMetrics.DialogEventMetric.Label = .init(""), value: Swift.Double = 0.0)
  public func map() -> DialogSDK_GRPC.Clickroad_TrackEvent
  public func toDialogEvent() -> DialogMetrics.DialogMetricStoragableEvent
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogEventMetric {
  public static func createOpenFromPushMetric(group: DialogProtocols.DialogGroup?) -> [DialogMetrics.DialogMetricStoragableEvent]
}
extension DialogEventMetric {
  public struct Action : Swift.RawRepresentable, Swift.Codable {
    public typealias RawValue = Swift.String
    public let rawValue: DialogMetrics.DialogEventMetric.Action.RawValue
    public init(rawValue: DialogMetrics.DialogEventMetric.Action.RawValue)
    public init(_ rawValue: DialogMetrics.DialogEventMetric.Action.RawValue)
    public static func raw(_ value: Swift.String) -> DialogMetrics.DialogEventMetric.Action
  }
}
extension DialogEventMetric.Action {
  public static let enableMute: DialogMetrics.DialogEventMetric.Action
  public static let disableMute: DialogMetrics.DialogEventMetric.Action
  public static let read: DialogMetrics.DialogEventMetric.Action
  public static let send: DialogMetrics.DialogEventMetric.Action
  public static let delete: DialogMetrics.DialogEventMetric.Action
  public static let download: DialogMetrics.DialogEventMetric.Action
  public static let `do`: DialogMetrics.DialogEventMetric.Action
  public static let callSip: DialogMetrics.DialogEventMetric.Action
  public static let answer: DialogMetrics.DialogEventMetric.Action
  public static let end: DialogMetrics.DialogEventMetric.Action
  public static let enableCamera: DialogMetrics.DialogEventMetric.Action
  public static let disableCamera: DialogMetrics.DialogEventMetric.Action
  public static let enableScreen: DialogMetrics.DialogEventMetric.Action
  public static let disableScreen: DialogMetrics.DialogEventMetric.Action
  public static let openFromPush: DialogMetrics.DialogEventMetric.Action
  public static let pin: DialogMetrics.DialogEventMetric.Action
  public static let unpin: DialogMetrics.DialogEventMetric.Action
  public static let join: DialogMetrics.DialogEventMetric.Action
  public static let create: DialogMetrics.DialogEventMetric.Action
  public static let leave: DialogMetrics.DialogEventMetric.Action
  public static let visible: DialogMetrics.DialogEventMetric.Action
  public static let hidden: DialogMetrics.DialogEventMetric.Action
  public static let focus: DialogMetrics.DialogEventMetric.Action
  public static let authorize: DialogMetrics.DialogEventMetric.Action
  public static let acceptPolicy: DialogMetrics.DialogEventMetric.Action
  public static let sipResponseCode: DialogMetrics.DialogEventMetric.Action
  public static let outboundAudioPacketsSent: DialogMetrics.DialogEventMetric.Action
  public static let outboundAudioRetransmittedPacketsSent: DialogMetrics.DialogEventMetric.Action
  public static let inboundAudioPacketsReceived: DialogMetrics.DialogEventMetric.Action
  public static let inboundAudioPacketsLost: DialogMetrics.DialogEventMetric.Action
  public static let outboundVideoPacketsSent: DialogMetrics.DialogEventMetric.Action
  public static let outboundVideoRetransmittedPacketsSent: DialogMetrics.DialogEventMetric.Action
  public static let outboundVideoFirCount: DialogMetrics.DialogEventMetric.Action
  public static let outboundVideoPliCount: DialogMetrics.DialogEventMetric.Action
  public static let outboundVideoNackCount: DialogMetrics.DialogEventMetric.Action
  public static let inboundVideoPacketsReceived: DialogMetrics.DialogEventMetric.Action
  public static let inboundVideoPacketsLost: DialogMetrics.DialogEventMetric.Action
  public static let inboundVideoFirCount: DialogMetrics.DialogEventMetric.Action
  public static let inboundVideoPliCount: DialogMetrics.DialogEventMetric.Action
  public static let inboundVideoNackCount: DialogMetrics.DialogEventMetric.Action
}
extension DialogEventMetric {
  public struct Category : Swift.RawRepresentable, Swift.Codable {
    public typealias RawValue = Swift.String
    public let rawValue: DialogMetrics.DialogEventMetric.Category.RawValue
    public init(rawValue: DialogMetrics.DialogEventMetric.Category.RawValue)
    public init(_ rawValue: DialogMetrics.DialogEventMetric.Category.RawValue)
    public static func raw(_ value: Swift.String) -> DialogMetrics.DialogEventMetric.Category
  }
}
extension DialogEventMetric.Category {
  public static let message: DialogMetrics.DialogEventMetric.Category
  public static let call: DialogMetrics.DialogEventMetric.Category
  public static let chat: DialogMetrics.DialogEventMetric.Category
  public static let presence: DialogMetrics.DialogEventMetric.Category
  public static let search: DialogMetrics.DialogEventMetric.Category
  public static let user: DialogMetrics.DialogEventMetric.Category
  public static let callsQuality: DialogMetrics.DialogEventMetric.Category
}
extension DialogEventMetric {
  public struct Label : Swift.RawRepresentable, Swift.Codable {
    public typealias RawValue = Swift.String
    public let rawValue: Swift.String
    public init(rawValue: DialogMetrics.DialogEventMetric.Label.RawValue)
    public init(_ rawValue: DialogMetrics.DialogEventMetric.Label.RawValue)
    public static func raw(_ value: Swift.String) -> DialogMetrics.DialogEventMetric.Label
  }
}
extension DialogEventMetric.Label {
  public static let textMessage: DialogMetrics.DialogEventMetric.Label
  public static let serviceMessage: DialogMetrics.DialogEventMetric.Label
  public static let documentMessage: DialogMetrics.DialogEventMetric.Label
  public static let documentExPhoto: DialogMetrics.DialogEventMetric.Label
  public static let documentExVideo: DialogMetrics.DialogEventMetric.Label
  public static let documentExVoice: DialogMetrics.DialogEventMetric.Label
  public static let stickerMessage: DialogMetrics.DialogEventMetric.Label
  public static let p2pChat: DialogMetrics.DialogEventMetric.Label
  public static let group: DialogMetrics.DialogEventMetric.Label
  public static let channel: DialogMetrics.DialogEventMetric.Label
}
public enum DialogMetric : Swift.Codable {
  case context(origin: DialogMetrics.DialogContextMetric)
  case screenView(origin: DialogMetrics.DialogScreenViewMetric)
  case event(origin: DialogMetrics.DialogEventMetric)
  case timing(origin: DialogMetrics.DialogTimingMetric)
  case social(origin: DialogMetrics.DialogSocialMetric)
  case error(origin: DialogMetrics.DialogErrorMetric)
  case unknown
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogMetric {
  public func toGrpcMetric() -> DialogSDK_GRPC.Clickroad_TrackMetric.OneOf_Metric?
}
public class DialogMetricsService : DialogMetrics.DialogMetricsServiceProtocol {
  final public let saveEvents: RxSwift.AnyObserver<[DialogMetrics.DialogMetricStoragableEvent]>
  final public let saveEventsInstantly: RxSwift.AnyObserver<[DialogMetrics.DialogMetricStoragableEvent]>
  final public let restorableInfo: RxSwift.AnyObserver<DialogProtocols.ChannelBasedServiceRestorableInfo?>
  final public let featureFlagsService: RxSwift.AnyObserver<DialogProtocols.DialogFeatureFlagsServiceProtocol?>
  public init(storageService: DialogMetrics.DialogMetricsStorageServiceProtocol, secureStorage: DialogProtocols.SecureStoragable, config: DialogMetrics.DialogMetricsService.Config?, netClient: DialogNetService.NetClientProtocol)
  public func clearContextIdInStorage() throws
  public func clearCurrentContext()
  @objc deinit
}
extension DialogMetricsService {
  public struct Config : DialogProtocols.ServerSettingsRepresentable {
    public var endpoint: Swift.String
    public var uploadStrategy: DialogMetrics.DialogMetricsService.Config.UploadStrategy
    public init(endpoint: Swift.String, uploadStrategy: DialogMetrics.DialogMetricsService.Config.UploadStrategy)
    public enum UploadStrategy : Swift.Equatable {
      case timeInterval(interval: Foundation.TimeInterval)
      case eventsLimit(limit: Swift.Int)
      case buffer(interval: Foundation.TimeInterval, limit: Swift.Int)
      public static func == (a: DialogMetrics.DialogMetricsService.Config.UploadStrategy, b: DialogMetrics.DialogMetricsService.Config.UploadStrategy) -> Swift.Bool
    }
    public var asServerSettings: DialogProtocols.ServerSettings {
      get
    }
  }
}
extension GeneralSecureStoragable {
  public var metricsContextId: DialogProtocols.StorageValueAccessor<Swift.String> {
    get
  }
  public var lastMetricsSending: DialogProtocols.StorageValueAccessor<Foundation.Date> {
    get
  }
}
extension SecureStorageKey {
  public static let metricsContextId: DialogProtocols.SecureStorageKey
  public static let lastMetricsSending: DialogProtocols.SecureStorageKey
}
public protocol DialogMetricsServiceProtocol : AnyObject {
  var saveEventsInstantly: RxSwift.AnyObserver<[DialogMetrics.DialogMetricStoragableEvent]> { get }
  var saveEvents: RxSwift.AnyObserver<[DialogMetrics.DialogMetricStoragableEvent]> { get }
  var restorableInfo: RxSwift.AnyObserver<DialogProtocols.ChannelBasedServiceRestorableInfo?> { get }
  var featureFlagsService: RxSwift.AnyObserver<DialogProtocols.DialogFeatureFlagsServiceProtocol?> { get }
  func clearCurrentContext()
  func clearContextIdInStorage() throws
}
public protocol DialogMetricsStorageServiceProtocol {
  func store(events: [DialogMetrics.DialogMetricStoragableEvent]) -> RxSwift.Observable<[DialogMetrics.DialogMetricStoragableEvent]>
  func remove(events: [DialogMetrics.DialogMetricStoragableEvent]) -> RxSwift.Observable<[DialogMetrics.DialogMetricStoragableEvent]>
  func removeAllEvents()
  func observeAllEvents() -> RxSwift.Observable<[DialogMetrics.DialogMetricStoragableEvent]>
}
final public class DialogMetricsStorageService : DialogMetrics.DialogMetricsStorageServiceProtocol {
  public static let storageKey: Swift.String
  public static let storageVersion: Swift.String
  public init(storageService: DialogStorage.DialogStorageServiceProtocol)
  final public func store(events: [DialogMetrics.DialogMetricStoragableEvent]) -> RxSwift.Observable<[DialogMetrics.DialogMetricStoragableEvent]>
  final public func observeAllEvents() -> RxSwift.Observable<[DialogMetrics.DialogMetricStoragableEvent]>
  final public func remove(events: [DialogMetrics.DialogMetricStoragableEvent]) -> RxSwift.Observable<[DialogMetrics.DialogMetricStoragableEvent]>
  final public func removeAllEvents()
  @objc deinit
}
public struct DialogScreenViewMetric : Swift.Codable {
  public init(name: DialogMetrics.DialogScreenViewMetric.ScreenViewName, source: DialogMetrics.DialogScreenViewMetric.ScreenViewSource)
  public init(name: DialogMetrics.DialogScreenViewMetric.ScreenViewName, source: DialogMetrics.DialogScreenViewMetric.ScreenViewSource, userId: DialogProtocols.DialogUserId)
  public init(name: DialogMetrics.DialogScreenViewMetric.ScreenViewName, source: DialogMetrics.DialogScreenViewMetric.ScreenViewSource, groupId: DialogProtocols.DialogGroupId)
  public func map() -> DialogSDK_GRPC.Clickroad_TrackScreenView
  public func toDialogEvent() -> DialogMetrics.DialogMetricStoragableEvent
  public enum ScreenViewName : Swift.String, Swift.Codable {
    case chat
    case saved_messages
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ScreenViewSource : Swift.String, Swift.Codable {
    case chat
    case dialogs
    case contacts
    case search
    case fav_profile
    case fav_chat
    case fav_star
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DialogSocialMetric : Swift.Codable {
  public init(network: Swift.String, action: Swift.String, target: Swift.String)
  public func map() -> DialogSDK_GRPC.Clickroad_TrackSocial
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DialogTimingMetric : Swift.Codable {
  public init(category: DialogMetrics.DialogTimingMetric.Category, variable: DialogMetrics.DialogTimingMetric.Variable, time: Swift.UInt64, label: DialogMetrics.DialogTimingMetric.Label)
  public func map() -> DialogSDK_GRPC.Clickroad_TrackTiming
  public func toDialogEvent() -> DialogMetrics.DialogMetricStoragableEvent
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogTimingMetric {
  public struct Category : Swift.RawRepresentable, Swift.Codable {
    public typealias RawValue = Swift.String
    public let rawValue: DialogMetrics.DialogTimingMetric.Category.RawValue
    public init(rawValue: DialogMetrics.DialogTimingMetric.Category.RawValue)
    public init(_ rawValue: DialogMetrics.DialogTimingMetric.Category.RawValue)
    public static func raw(_ value: Swift.String) -> DialogMetrics.DialogTimingMetric.Category
  }
}
extension DialogTimingMetric.Category {
  public static let app: DialogMetrics.DialogTimingMetric.Category
  public static let rpc: DialogMetrics.DialogTimingMetric.Category
  public static let messaging: DialogMetrics.DialogTimingMetric.Category
  public static let sequence: DialogMetrics.DialogTimingMetric.Category
}
extension DialogTimingMetric {
  public struct Label : Swift.RawRepresentable, Swift.Codable {
    public typealias RawValue = Swift.String
    public let rawValue: DialogMetrics.DialogTimingMetric.Label.RawValue
    public init(rawValue: DialogMetrics.DialogTimingMetric.Label.RawValue)
    public init(_ rawValue: DialogMetrics.DialogTimingMetric.Label.RawValue)
    public static func raw(_ value: Swift.String) -> DialogMetrics.DialogTimingMetric.Label
  }
}
extension DialogTimingMetric.Label {
  public static let ok: DialogMetrics.DialogTimingMetric.Label
  public static let internalError: DialogMetrics.DialogTimingMetric.Label
  public static let none: DialogMetrics.DialogTimingMetric.Label
  public static func peerStr(userId: DialogProtocols.DialogUserId) -> DialogMetrics.DialogTimingMetric.Label
  public static func peerStr(groupId: DialogProtocols.DialogGroupId) -> DialogMetrics.DialogTimingMetric.Label
}
extension DialogTimingMetric {
  public struct Variable : Swift.RawRepresentable, Swift.Codable {
    public typealias RawValue = Swift.String
    public let rawValue: DialogMetrics.DialogTimingMetric.Variable.RawValue
    public init(rawValue: DialogMetrics.DialogTimingMetric.Variable.RawValue)
    public init(_ rawValue: DialogMetrics.DialogTimingMetric.Variable.RawValue)
    public static func raw(_ value: Swift.String) -> DialogMetrics.DialogTimingMetric.Variable
  }
}
extension DialogTimingMetric.Variable {
  public static let firstRenderPaint: DialogMetrics.DialogTimingMetric.Variable
  public static let firstMeaningfulPaint: DialogMetrics.DialogTimingMetric.Variable
  public static func requestName(name: Swift.String) -> DialogMetrics.DialogTimingMetric.Variable
  public static let loadHistory: DialogMetrics.DialogTimingMetric.Variable
  public static let switchToPeer: DialogMetrics.DialogTimingMetric.Variable
  public static let loadDifference: DialogMetrics.DialogTimingMetric.Variable
  public static let parseDifference: DialogMetrics.DialogTimingMetric.Variable
  public static let applyDifference: DialogMetrics.DialogTimingMetric.Variable
}
extension DialogMetrics.DialogScreenViewMetric.ScreenViewName : Swift.Equatable {}
extension DialogMetrics.DialogScreenViewMetric.ScreenViewName : Swift.Hashable {}
extension DialogMetrics.DialogScreenViewMetric.ScreenViewName : Swift.RawRepresentable {}
extension DialogMetrics.DialogScreenViewMetric.ScreenViewSource : Swift.Equatable {}
extension DialogMetrics.DialogScreenViewMetric.ScreenViewSource : Swift.Hashable {}
extension DialogMetrics.DialogScreenViewMetric.ScreenViewSource : Swift.RawRepresentable {}
