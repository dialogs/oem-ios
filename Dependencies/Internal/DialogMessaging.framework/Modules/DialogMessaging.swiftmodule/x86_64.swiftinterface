// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DialogMessaging
import Alamofire
import Cache
import DialogFiles
@_exported import DialogMessaging
import DialogMetrics
import DialogNetService
import DialogNetworking
import DialogProtocols
import DialogRx
import DialogSDK_GRPC
import DialogStorage
import DialogSwiftGRPCExtra
import Dialog_gRPC_Objc
import Foundation
import GRDB
import Reachability
import RxAlamofire
import RxCocoa
import RxRelay
import RxSwift
import RxSwiftExt
import Swift
import SwiftGRPC
import SwiftProtobuf
extension MessageContent {
  public var map: DialogProtocols.DialogMessageContentProtocol {
    get
  }
}
extension Dialog_MessageContent {
  public var map: DialogProtocols.DialogMessageContentProtocol {
    get
  }
}
extension CurrentUserPermissionType {
  public func map() -> DialogSDK_GRPC.Dialog_Permission
}
extension Dialog_ResponseGetPermissions {
  public func map() -> DialogProtocols.DialogCurrentUserPermissionState
}
extension Dialog_SeqUpdateBox {
  public func attachContentChangesUpdate(current state: DialogProtocols.DialogAttachedMessagesState) -> DialogSDK_GRPC.Dialog_UpdateMessageContentChanged?
}
extension Dialog_UpdateMessageContentChanged {
  public func updatedMessage(in state: DialogProtocols.DialogAttachedMessagesState) -> DialogProtocols.DialogMessage?
}
extension DialogActiveGroupsState {
  public static func union() -> (DialogProtocols.BusEvent, DialogProtocols.DialogActiveGroupsState) -> DialogProtocols.DialogActiveGroupsState
}
public class DialogActiveSessionsService : DialogMessaging.DialogActiveSessionsServiceProtocol {
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, netService: DialogNetService.NetServiceProtocol)
  public func getListOfAuthSessions() -> RxSwift.Observable<[DialogSDK_GRPC.Dialog_AuthSession]>
  public func terminateAllSessions() -> RxSwift.Observable<Swift.Void>
  public func terminateSession(byId id: Swift.Int32) -> RxSwift.Observable<Swift.Void>
  @objc deinit
}
public protocol DialogActiveSessionsServiceProtocol {
  func getListOfAuthSessions() -> RxSwift.Observable<[DialogSDK_GRPC.Dialog_AuthSession]>
  func terminateAllSessions() -> RxSwift.Observable<Swift.Void>
  func terminateSession(byId id: Swift.Int32) -> RxSwift.Observable<Swift.Void>
}
extension DialogActiveUsersState {
  public static func union() -> (DialogProtocols.BusEvent, DialogProtocols.DialogActiveUsersState) -> DialogProtocols.DialogActiveUsersState
}
public class DialogAttachmentsService : DialogMessaging.DialogAttachmentsServiceProtocol {
  public init(seqService: DialogMessaging.DialogSeqUpdatesServiceProtocol, eventService: DialogProtocols.EventBusServiceProtocol)
  @objc deinit
}
public protocol DialogAttachmentsServiceProtocol {
}
public struct DialogContactsResponse {
  public var userPeers: [DialogSDK_GRPC.Dialog_UserOutPeer]
  public init(userPeers: [DialogSDK_GRPC.Dialog_UserOutPeer])
}
extension DialogContactsResponse {
  public init(grpcResponse response: DialogSDK_GRPC.Dialog_ResponseGetContacts)
  public init(grpcResponse response: DialogSDK_GRPC.Dialog_ResponseSearchContacts)
}
public class DialogContactsService : DialogMessaging.DialogContactsServiceProtocol {
  final public let addingContacts: RxRelay.BehaviorRelay<[DialogProtocols.DialogUserId]>
  final public let removingContacts: RxRelay.BehaviorRelay<[DialogProtocols.DialogUserId]>
  public func getContacts() -> RxSwift.Observable<DialogMessaging.DialogContactsResponse>
  public func getContactList() -> RxSwift.Observable<[DialogProtocols.DialogUser]>
  public func isInContactsList(userID: DialogProtocols.DialogUserId) -> RxSwift.Observable<Swift.Bool>
  public func addToContactList(user: DialogProtocols.DialogUser) -> RxSwift.Completable
  public func removeFromContactList(user: DialogProtocols.DialogUser) -> RxSwift.Completable
  public func searchContacts(by query: Swift.String) -> RxSwift.Observable<[DialogProtocols.DialogUser]>
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, seqUpdateService: DialogMessaging.DialogSeqUpdatesServiceProtocol, eventBusService: DialogProtocols.EventBusServiceProtocol, netService: DialogNetService.NetServiceProtocol, taskProvider: DialogNetService.GRPCTaskProviderProtocol)
  @objc deinit
}
public protocol DialogContactsServiceProtocol {
  func getContacts() -> RxSwift.Observable<DialogMessaging.DialogContactsResponse>
  func getContactList() -> RxSwift.Observable<[DialogProtocols.DialogUser]>
  func addToContactList(user: DialogProtocols.DialogUser) -> RxSwift.Completable
  func removeFromContactList(user: DialogProtocols.DialogUser) -> RxSwift.Completable
  func isInContactsList(userID: DialogProtocols.DialogUserId) -> RxSwift.Observable<Swift.Bool>
  var addingContacts: RxRelay.BehaviorRelay<[DialogProtocols.DialogUserId]> { get }
  var removingContacts: RxRelay.BehaviorRelay<[DialogProtocols.DialogUserId]> { get }
  @available(*, deprecated, message: "Should be changed to performSearch(by:String) with simple search method")
  func searchContacts(by query: Swift.String) -> RxSwift.Observable<[DialogProtocols.DialogUser]>
}
extension DialogContactsServiceProtocol {
  public func isProcessing(contactId: DialogProtocols.DialogUserId) -> RxSwift.Observable<Swift.Bool>
}
extension DialogGroup.Create.Request {
  public func asGrpcPresentable() -> DialogSDK_GRPC.Dialog_RequestCreateGroup
}
extension Dialog_RequestCreateGroup {
  public func asWrapper() -> DialogProtocols.DialogGroup.Create.Request
}
extension DialogGroup.Create.Request : Swift.Equatable {
  public static func == (lhs: DialogProtocols.DialogGroup.Create.Request, rhs: DialogProtocols.DialogGroup.Create.Request) -> Swift.Bool
}
extension DialogGroup.Create.Response {
  public init(_ grpcResponse: DialogSDK_GRPC.Dialog_ResponseCreateGroup, request: DialogProtocols.DialogGroup.Create.Request)
  public init(_ this: DialogProtocols.DialogGroup.Create.Response, apply about: Swift.String)
  public init(_ this: DialogProtocols.DialogGroup.Create.Response, apply avatar: DialogProtocols.DialogFile)
}
extension DialogListState {
  public init(response: DialogProtocols.DialogGroup.Create.Response)
}
extension DialogCurrentRepliesState {
  public static func update() -> (DialogProtocols.BusEvent, DialogProtocols.DialogCurrentRepliesState) -> DialogProtocols.DialogCurrentRepliesState
}
public class DialogCurrentUserPermissionService : DialogProtocols.DialogCurrentUserPermissionServiceProtocol {
  public init(channelService: DialogProtocols.DialogChannelServiceProtocol, eventBus: DialogProtocols.EventBusServiceProtocol, netService: DialogNetService.NetServiceProtocol)
  @objc deinit
}
extension DialogCurrentUserPermissionState {
  public static func union() -> (DialogProtocols.BusEvent, DialogProtocols.DialogCurrentUserPermissionState) -> DialogProtocols.DialogCurrentUserPermissionState
}
public struct DialogDeletedMessageContent : Swift.Codable, DialogProtocols.DialogMessageContentProtocol, Swift.Equatable {
  public var isContentUploaded: Swift.Bool
  public func map() -> DialogSDK_GRPC.Dialog_MessageContent
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogDeletedMessageContent, b: DialogMessaging.DialogDeletedMessageContent) -> Swift.Bool
}
public class DialogDocumentMessageContent : DialogProtocols.DialogMessageContentProtocol, Swift.Equatable {
  public static func == (lhs: DialogMessaging.DialogDocumentMessageContent, rhs: DialogMessaging.DialogDocumentMessageContent) -> Swift.Bool
  public typealias LoadProgressInfo = (bytesWritten: Swift.Int64, totalBytes: Swift.Int64)
  public var isContentUploaded: Swift.Bool {
    get
  }
  public var fileSource: DialogProtocols.DialogFile
  final public let mimeType: Swift.String
  final public let name: Swift.String
  final public let fastThumb: DialogProtocols.DialogFastThumb?
  public var fileSize: Swift.UInt64? {
    get
  }
  final public let uuid: Swift.String
  final public let fileUploadProgress: RxSwift.PublishSubject<DialogMessaging.DialogDocumentMessageContent.LoadProgressInfo>
  final public let canceledUpload: RxSwift.BehaviorSubject<Swift.Bool>
  public init(message: DialogSDK_GRPC.Dialog_DocumentMessage)
  public init(message: Dialog_gRPC_Objc.DocumentMessage)
  public init(fileSource: DialogProtocols.DialogFile, mimeType: Swift.String, name: Swift.String, thumb: DialogProtocols.DialogFastThumb?, uuid: Swift.String = UUID().uuidString)
  public func updateFileSize(from url: Foundation.URL)
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public func map() -> DialogSDK_GRPC.Dialog_MessageContent
  public var localUrl: Foundation.URL? {
    get
  }
  @objc deinit
}
extension DialogDocumentMessageContent : DialogProtocols.DialogAbstractFileContent {
}
extension DialogAbstractFileContent {
  public var asUploadRequest: DialogFiles.DialogUploadFileRequest? {
    get
  }
}
extension DialogEventMetric.Label {
  public static func from(content: DialogProtocols.DialogMessageContentProtocol?) -> DialogMetrics.DialogEventMetric.Label
}
extension DialogGroup {
  public var eventMetricLabel: DialogMetrics.DialogEventMetric.Label {
    get
  }
}
extension DialogGroup : GRDB.MutablePersistableRecord {
  public static let persistenceConflictPolicy: GRDB.PersistenceConflictPolicy
}
extension DialogGroup : DialogStorage.DialogStoragableProtocol {
  public var tableName: Swift.String {
    get
  }
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogGroupMember : GRDB.MutablePersistableRecord {
  public static let persistenceConflictPolicy: GRDB.PersistenceConflictPolicy
}
extension DialogGroupMember : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case clock
    case userId
    case groupId
    case permissions
    case invitedAt
    case deletedAt
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogGroupMember : DialogStorage.DialogStoragableProtocol {
  public var tableName: Swift.String {
    get
  }
  public func requireToCreateTable(in database: GRDB.Database) throws
}
public class DialogGroupMembersService : DialogMessaging.DialogGroupMembersServiceProtocol {
  final public let loadMembers: RxSwift.AnyObserver<[DialogProtocols.DialogGroupId]>
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol, eventBusService: DialogProtocols.EventBusServiceProtocol, activeUserId: DialogProtocols.DialogUserId)
  public func prefetchAllMembers()
  public func prefetchMembersFor(groupId: DialogProtocols.DialogGroupId)
  public func free()
  @objc deinit
}
public protocol DialogGroupMembersServiceProtocol {
  var loadMembers: RxSwift.AnyObserver<[DialogProtocols.DialogGroupId]> { get }
  func prefetchAllMembers()
  func prefetchMembersFor(groupId: DialogProtocols.DialogGroupId)
  func free()
}
extension DialogGroupMembersState {
  public static func union() -> (DialogProtocols.BusEvent, DialogProtocols.DialogGroupMembersState) -> DialogProtocols.DialogGroupMembersState
  public static func updatePermissions() -> (DialogProtocols.BusEvent, DialogProtocols.DialogGroupMembersState) -> DialogProtocols.DialogGroupMembersState
}
extension DialogGroupMembersState {
  public func makeState(diff: [DialogSDK_GRPC.Dialog_UpdateSeqUpdate]) -> (updateState: DialogProtocols.DialogGroupMembersState, deleteState: DialogProtocols.DialogGroupMembersState)
  public func makeState(update: DialogSDK_GRPC.Dialog_SeqUpdateBox) -> DialogProtocols.DialogGroupMembersState
  public func makeState(update: DialogSDK_GRPC.Dialog_UpdateSeqUpdate) -> DialogProtocols.DialogGroupMembersState
  public enum UpdateType {
    case none
    case update
    case delete
    public static func == (a: DialogProtocols.DialogGroupMembersState.UpdateType, b: DialogProtocols.DialogGroupMembersState.UpdateType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func typeUpdateSeq(_ update: DialogSDK_GRPC.Dialog_SeqUpdateBox) -> DialogProtocols.DialogGroupMembersState.UpdateType
  public static func typeUpdateSeq(_ update: DialogSDK_GRPC.Dialog_UpdateSeqUpdate) -> DialogProtocols.DialogGroupMembersState.UpdateType
}
extension Dialog_ResponseGetReferencedEntitites {
  public var myMembersState: DialogProtocols.DialogGroupMembersState {
    get
  }
}
public class DialogGroupService : DialogProtocols.DialogGroupServiceProtocol {
  final public let loadGroups: RxSwift.AnyObserver<[DialogProtocols.DialogGroupId]>
  required public init(activeUserId: DialogProtocols.DialogUserId, channelService: DialogProtocols.DialogChannelServiceProtocol, taskProvider: DialogNetService.GRPCTaskProviderProtocol, updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol, eventBusService: DialogProtocols.EventBusServiceProtocol, uploadFileService: DialogFiles.DialogUploadFileServiceProtocol, connectionService: DialogProtocols.ConnectionServiceProtocol, membersService: DialogMessaging.DialogGroupMembersServiceProtocol, localSyncService: DialogMessaging.LocalSyncPersistanceServiceProtocol, netService: DialogNetService.NetServiceProtocol, metricsService: DialogMetrics.DialogMetricsServiceProtocol)
  public func getGroupInviteUrl(_ group: DialogProtocols.DialogGroup) -> RxSwift.Observable<Swift.String>
  public func revokeGroupInviteUrl(_ group: DialogProtocols.DialogGroup) -> RxSwift.Observable<Swift.String>
  public func getGroupIntegrationUrl(_ group: DialogProtocols.DialogGroup) -> RxSwift.Observable<Swift.String>
  public func revokeGroupIntegrationUrl(_ group: DialogProtocols.DialogGroup) -> RxSwift.Observable<Swift.String>
  public func inviteUsers(_ group: DialogProtocols.DialogGroup, users: [DialogProtocols.DialogUser], progress: RxSwift.AnyObserver<DialogProtocols.DialogGroup.Invite.Progress>?) -> RxSwift.Observable<[DialogProtocols.DialogGroup.Invite.Response]>
  public func updatePermissions(_ user: DialogProtocols.DialogUser, revoke: [DialogProtocols.DialogGroupMember.Permissions], add: [DialogProtocols.DialogGroupMember.Permissions], from group: DialogProtocols.DialogGroup) -> RxSwift.Observable<DialogSDK_GRPC.Dialog_ResponseMember>
  public func transferOwnership(_ userId: DialogProtocols.DialogUserId, from group: DialogProtocols.DialogGroup) -> RxSwift.Observable<DialogSDK_GRPC.Dialog_ResponseSeqDate>
  public func kickUser(_ user: DialogProtocols.DialogUser, from group: DialogProtocols.DialogGroup) -> RxSwift.Observable<DialogSDK_GRPC.Dialog_ResponseSeqDateMid>
  public func joinGroup(_ group: DialogProtocols.DialogGroup) -> RxSwift.Completable
  public func createGroup(_ request: DialogProtocols.DialogGroup.Create.Request) -> RxSwift.Observable<DialogProtocols.DialogGroup.Create.Response>
  public func editGroup(_ group: DialogProtocols.DialogGroup, about: Swift.String) -> RxSwift.Observable<Swift.String>
  public func editGroup(_ group: DialogProtocols.DialogGroup, title: Swift.String) -> RxSwift.Observable<Swift.String>
  public func editGroup(_ group: DialogProtocols.DialogGroup, shortname: Swift.String) -> RxSwift.Observable<Swift.String>
  public func editGroup(_ group: DialogProtocols.DialogGroup, avatar: DialogProtocols.DialogAbstractFileContent) -> RxSwift.Observable<DialogProtocols.DialogFile>
  public func removeAvatar(from group: DialogProtocols.DialogGroup) -> RxSwift.Observable<Swift.Void>
  public func getGroupMemberPermissions(groupId: Swift.Int32, userId: Swift.Int32) -> RxSwift.Observable<[DialogSDK_GRPC.Dialog_GroupMemberPermission]>
  public func joinGroup(with token: Swift.String) -> RxSwift.Observable<DialogProtocols.DialogGroup?>
  @objc deinit
}
public struct DialogInteractiveMedia : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let widget: DialogMessaging.DialogInteractiveMediaWidget?
  public let style: DialogMessaging.DialogInteractiveMediaStyle
  public let confirm: DialogMessaging.DialogInteractiveMediaConfirm?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogInteractiveMedia, b: DialogMessaging.DialogInteractiveMedia) -> Swift.Bool
}
public struct DialogInteractiveMediaSelectOption : Swift.Codable, Swift.Equatable {
  public let value: Swift.String
  public let label: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogInteractiveMediaSelectOption, b: DialogMessaging.DialogInteractiveMediaSelectOption) -> Swift.Bool
}
public struct DialogInteractiveMediaButton : Swift.Codable, Swift.Equatable {
  public let value: Swift.String
  public let label: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogInteractiveMediaButton, b: DialogMessaging.DialogInteractiveMediaButton) -> Swift.Bool
}
public struct DialogInteractiveMediaSelect : Swift.Codable, Swift.Equatable {
  public let options: [DialogMessaging.DialogInteractiveMediaSelectOption]
  public let label: Swift.String?
  public let defaultValue: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogInteractiveMediaSelect, b: DialogMessaging.DialogInteractiveMediaSelect) -> Swift.Bool
}
public enum DialogInteractiveMediaStyle : Swift.Int, Swift.Codable {
  case unknown
  case `default`
  case primary
  case danger
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct DialogInteractiveMediaConfirm : Swift.Codable, Swift.Equatable {
  public let text: Swift.String?
  public let title: Swift.String?
  public let confirmButtonText: Swift.String?
  public let dismissButtonText: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogInteractiveMediaConfirm, b: DialogMessaging.DialogInteractiveMediaConfirm) -> Swift.Bool
}
public enum DialogInteractiveMediaWidget {
  case button(DialogMessaging.DialogInteractiveMediaButton)
  case select(DialogMessaging.DialogInteractiveMediaSelect)
}
extension DialogInteractiveMediaWidget : Swift.Codable, Swift.Equatable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogInteractiveMediaWidget, b: DialogMessaging.DialogInteractiveMediaWidget) -> Swift.Bool
}
extension DialogGroup.Invite.Request : Swift.Equatable {
  public static func == (lhs: DialogProtocols.DialogGroup.Invite.Request, rhs: DialogProtocols.DialogGroup.Invite.Request) -> Swift.Bool
}
extension DialogGroup.Invite.Request {
  public func grpcRequest() -> DialogSDK_GRPC.Dialog_RequestInviteUser
  public static func grpcRequests(groupId: Swift.Int32, accessHash: Swift.Int64, users: [DialogProtocols.DialogUser]) -> [DialogSDK_GRPC.Dialog_RequestInviteUser]
}
extension DialogGroup.Invite.Response {
  public init(success seqDate: DialogSDK_GRPC.Dialog_ResponseSeqDateMid, request: DialogProtocols.DialogGroup.Invite.Request)
  public init(failure: Swift.Error, request: DialogProtocols.DialogGroup.Invite.Request)
}
extension Sequence where Self.Element == DialogProtocols.DialogGroup.Invite.Response {
  public func mapToGroupMembersState() -> DialogProtocols.DialogGroupMembersState
  public func mapToGroupMembersDict() -> [DialogProtocols.DialogUserId : DialogProtocols.DialogGroupMember]
}
extension DialogLastMessageEdit : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case peerId
    case clock
    case prevClock
    case midMSB
    case midLSB
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogLastMessageEdit : GRDB.MutablePersistableRecord {
  public static let persistenceConflictPolicy: GRDB.PersistenceConflictPolicy
}
extension DialogLastMessageEdit : DialogStorage.DialogStoragableProtocol {
  public var tableName: Swift.String {
    get
  }
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension Collection where Self.Element == DialogProtocols.DialogMessage {
  public var asDialogLastMessagesState: DialogProtocols.DialogLastMessagesState {
    get
  }
}
final public class DialogMediaActionService : DialogMessaging.DialogMediaActionServiceProtocol {
  final public let perform: RxSwift.AnyObserver<DialogProtocols.DialogMediaActionRequest>
  final public let performingRequests: RxSwift.Observable<Swift.Set<DialogProtocols.DialogMediaActionRequest>>
  public init(channelService: DialogProtocols.DialogChannelServiceProtocol, netService: DialogNetService.NetServiceProtocol, isMock: Swift.Bool = false)
  @objc deinit
}
public protocol DialogMediaActionServiceProtocol {
  var perform: RxSwift.AnyObserver<DialogProtocols.DialogMediaActionRequest> { get }
  var performingRequests: RxSwift.Observable<Swift.Set<DialogProtocols.DialogMediaActionRequest>> { get }
}
extension DialogMessage : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init(response: DialogSDK_GRPC.Dialog_ResponseLoadHistory, rawMessage: DialogSDK_GRPC.Dialog_HistoryMessage, peerId: Swift.Int32)
  public init(fromSearchResult searchResult: DialogSDK_GRPC.Dialog_MessageSearchResult, authorPeer: DialogProtocols.DialogPeer?)
}
extension Array where Element == DialogProtocols.DialogMessage {
  public func findIndex(of message: DialogProtocols.DialogMessage) -> Swift.Array<Element>.Index?
  public func first(message: DialogProtocols.DialogMessage) -> DialogProtocols.DialogMessage?
  public func sortedMergeDuplicates() -> Swift.Array<Element>
}
extension DialogMessage {
  public func deleteLocalFile()
  public func merge(with otherMessage: DialogProtocols.DialogMessage) -> DialogProtocols.DialogMessage
}
extension DialogMessage : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogMessage {
  public static func allExpression(with date: Swift.Int64) -> (Swift.String, GRDB.StatementArguments?)
}
extension DialogMessage : DialogMetrics.DialogEventsConvertible {
  public func convert() -> [DialogMetrics.DialogMetricStoragableEvent]
}
public class DialogMessageEditingService : DialogMessaging.DialogMessageEditingServiceProtocol {
  public init(eventBus: DialogProtocols.EventBusServiceProtocol, netService: DialogNetService.NetServiceProtocol, storage: DialogStorage.DialogStorageServiceProtocol, offlineMessagesService: DialogMessaging.DialogOfflineMessagesServiceProtocol, metricsService: DialogMetrics.DialogMetricsServiceProtocol)
  public func delete(messages: [DialogProtocols.DialogMessage], inPeer: DialogProtocols.DialogPeer?)
  public func delete(mids: [DialogSDK_GRPC.Dialog_UUIDValue], inPeer: DialogProtocols.DialogPeer?)
  public func update(message: DialogProtocols.DialogMessage, text content: DialogProtocols.DialogMessageContentProtocol, inPeer: DialogProtocols.DialogPeer?)
  @objc deinit
}
extension DialogStorageServiceProtocol {
  public func storageRemove(messages: [DialogProtocols.DialogMessage]) -> RxSwift.Observable<[DialogProtocols.DialogMessage]>
}
public protocol DialogMessageEditingServiceProtocol {
  func update(message: DialogProtocols.DialogMessage, text content: DialogProtocols.DialogMessageContentProtocol, inPeer: DialogProtocols.DialogPeer?)
  func delete(mids: [DialogSDK_GRPC.Dialog_UUIDValue], inPeer: DialogProtocols.DialogPeer?)
  func delete(messages: [DialogProtocols.DialogMessage], inPeer: DialogProtocols.DialogPeer?)
}
public struct DialogMessageMedia : Swift.Codable, Swift.Equatable {
  public let actionGroups: [DialogMessaging.DialogInteractiveMediaGroup]
  public let webPageMedia: DialogMessaging.DialogWebpageMedia?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogMessageMedia, b: DialogMessaging.DialogMessageMedia) -> Swift.Bool
}
public struct DialogInteractiveMediaGroup : Swift.Codable, Swift.Equatable {
  public let actions: [DialogMessaging.DialogInteractiveMedia]
  public let title: Swift.String?
  public let description: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogInteractiveMediaGroup, b: DialogMessaging.DialogInteractiveMediaGroup) -> Swift.Bool
}
public struct DialogWebpageMedia : Swift.Codable, Swift.Equatable {
  public let url: Swift.String
  public let title: Swift.String
  public let description: Swift.String
  public let imageLocation: DialogProtocols.DialogFile
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogWebpageMedia, b: DialogMessaging.DialogWebpageMedia) -> Swift.Bool
}
extension DialogMessageReaction : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogReaction : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogMessageReaction : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogMessagesEditingState {
  public static func update() -> (DialogProtocols.BusEvent, DialogProtocols.DialogMessagesEditingState) -> DialogProtocols.DialogMessagesEditingState
}
extension DialogMessagesList {
  public static func replaceWithLastResult() -> (DialogProtocols.BusEvent, DialogProtocols.DialogMessagesList) -> DialogProtocols.DialogMessagesList
}
extension DialogMessagesList {
  public var minDate: Swift.Int64? {
    get
  }
  public var maxDate: Swift.Int64? {
    get
  }
  public var optMinDate: Swift.Int64? {
    get
  }
  public var optMaxDate: Swift.Int64? {
    get
  }
  public var isZero: Swift.Bool {
    get
  }
}
extension DialogMessagesRequest {
  public init(type: DialogProtocols.DialogMessagesRequestDirection = .backward, limit: Swift.Int32 = 30)
}
extension DialogMessagesRequest {
  public func map(peer: DialogSDK_GRPC.Dialog_OutPeer) -> DialogSDK_GRPC.Dialog_RequestLoadHistory
}
extension DialogMessagesRequestDirection {
  public func map() -> DialogSDK_GRPC.Dialog_ListLoadMode
}
extension DialogMessagesRequest : Swift.Equatable {
}
public func == (lhs: DialogProtocols.DialogMessagesRequest, rhs: DialogProtocols.DialogMessagesRequest) -> Swift.Bool
extension DialogMessagesList {
  public func apply(update: DialogSDK_GRPC.Dialog_SeqUpdateBox) throws -> DialogProtocols.DialogMessagesList
}
public class DialogMessagesService : DialogMessaging.DialogMessagesServiceProtocol {
  final public let perform: RxSwift.AnyObserver<DialogProtocols.DialogMessagesRequest>
  public init(for peer: DialogProtocols.DialogPeer, activeUserId: DialogProtocols.DialogUserId, channelService: DialogProtocols.DialogChannelServiceProtocol, storage: DialogStorage.DialogStorageServiceProtocol, updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol, weakUpdatesService: DialogMessaging.DialogWeakMessagesServiceProtocol, reactionService: DialogMessaging.DialogReactionsServiceProtocol, busEventsService: DialogProtocols.EventBusServiceProtocol, netService: DialogNetService.NetServiceProtocol, connectionService: DialogProtocols.ConnectionServiceProtocol, isMock: Swift.Bool = false, initial request: DialogProtocols.DialogMessagesRequest, metricsService: DialogMetrics.DialogMetricsServiceProtocol, lastMessageDate: Swift.Int64)
  @objc deinit
}
extension Array where Element == DialogProtocols.DialogMessage {
  public func loadReactionsIfNeeded(storage: DialogStorage.DialogStorageServiceProtocol, eventBus: DialogProtocols.EventBusServiceProtocol) -> RxSwift.Observable<[DialogProtocols.DialogMessage]>
  public func checkForReactionsNotInMemory(eventBus: DialogProtocols.EventBusServiceProtocol) -> RxSwift.Observable<[DialogSDK_GRPC.Dialog_UUIDValue]>
}
extension Array where Element == DialogProtocols.DialogMessage {
  public func loadAttachmentsIfNeeded(service: RxSwift.Observable<DialogSDK_GRPC.Dialog_SequenceAndUpdatesService>, storage: DialogStorage.DialogStorageServiceProtocol, eventBus: DialogProtocols.EventBusServiceProtocol) -> RxSwift.Observable<[DialogProtocols.DialogMessage]>
  public func checkForAttachNotInMemory(eventBus: DialogProtocols.EventBusServiceProtocol) -> RxSwift.Observable<[DialogSDK_GRPC.Dialog_UUIDValue]>
}
extension BusEvent {
  public var isReset: Swift.Bool {
    get
  }
  public var isRemoteFetchBackward: Swift.Bool {
    get
  }
  public var isRemoteFetchForward: Swift.Bool {
    get
  }
}
public protocol DialogWeakMessagesServiceProtocol {
  var shouldSendRequest: RxSwift.Observable<DialogProtocols.DialogMessagesRequest> { get }
}
public protocol DialogWeakMessagesUpdatesServiceProtocol {
}
public protocol DialogWeakMessageServiceProtocol {
}
public protocol DialogMessagesServiceProtocol {
  var perform: RxSwift.AnyObserver<DialogProtocols.DialogMessagesRequest> { get }
}
public enum MessagingErrorType {
  case corruptedUpdate
  case failedDialogUpdate(peer: DialogProtocols.DialogPeer, updateSeq: Swift.Int32)
  case failedGroupUpdate(groupId: DialogProtocols.DialogGroupId, updateSeq: Swift.Int32)
  case missedUpdatesInInterval(currentSeq: Swift.Int32, updateSeq: Swift.Int32)
  case missedUpdatesInWeakInterval(peer: DialogProtocols.DialogPeerId, clock: DialogProtocols.Clock)
  case missedEditInWeakInterval(peer: DialogProtocols.DialogPeerId)
  case missedAuthorInMessage
  case missedMessageIdInResponse
  case cantMergeWithEmptyMessagesHistory
  case requiredToPerform(request: DialogProtocols.DialogMessagesRequest)
  case updateNotForCurrent(peerId: Swift.Int32)
  case updateNotSupported
  case failedToPerformOneMessage(request: DialogMessaging.DialogOneMessageRequest, withError: Swift.Error)
  case filedToInsertEmptyMessage
}
public struct DialogMessagingError : Swift.Error {
  public let type: DialogMessaging.MessagingErrorType
  public init(type: DialogMessaging.MessagingErrorType)
}
public class DialogMetricsServiceMock : DialogMetrics.DialogMetricsServiceProtocol {
  public var saveEventsInstantly: RxSwift.AnyObserver<[DialogMetrics.DialogMetricStoragableEvent]>
  public var saveEvents: RxSwift.AnyObserver<[DialogMetrics.DialogMetricStoragableEvent]>
  public var restorableInfo: RxSwift.AnyObserver<RxSwift.PublishSubject<DialogProtocols.ChannelBasedServiceRestorableInfo?>.Element>
  public func clearCurrentContext()
  public init()
  @objc deinit
}
extension DialogMyDraft : DialogStorage.DialogStoragableProtocol {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogMyMessagesStatus : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
public class DialogMyMessageStatusService : DialogMessaging.DialogMyMessageStatusServiceProtocol {
  public init(updateService: DialogMessaging.DialogSeqUpdatesServiceProtocol, weakService: DialogMessaging.DialogWeakUpdatesServiceObjcProtocol, featureFlagsService: DialogProtocols.DialogFeatureFlagsServiceProtocol, eventBus: DialogProtocols.EventBusServiceProtocol)
  @objc deinit
}
public protocol DialogMyMessageStatusServiceProtocol {
}
public protocol DialogOfflineMessagesServiceProtocol {
  func resend(messages: [DialogProtocols.DialogMessage])
  func cancel(message: DialogProtocols.DialogMessage)
  func deleteState(message: DialogProtocols.DialogMessage)
  var state: RxSwift.Observable<DialogMessaging.DialogOfflineMessagesService.State> { get }
}
public class DialogOfflineMessagesService : DialogMessaging.DialogOfflineMessagesServiceProtocol {
  public struct State {
  }
  final public let state: RxSwift.Observable<DialogMessaging.DialogOfflineMessagesService.State>
  public init(channelService: DialogProtocols.DialogChannelServiceProtocol, storage: DialogStorage.DialogStorageServiceProtocol, uploadService: DialogFiles.DialogUploadFileServiceProtocol, busEventsService: DialogProtocols.EventBusServiceProtocol, connectionService: DialogProtocols.ConnectionServiceProtocol)
  public func resend(messages: [DialogProtocols.DialogMessage])
  public func cancel(message: DialogProtocols.DialogMessage)
  public func deleteState(message: DialogProtocols.DialogMessage)
  @objc deinit
}
public enum DialogOneMessageRequestType : Swift.Int {
  case create
  case edit
  case delete
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct DialogOneMessageRequest {
  public let type: DialogMessaging.DialogOneMessageRequestType
  public var peer: DialogProtocols.DialogPeer
  public let content: DialogProtocols.DialogMessageContentProtocol
  public let attachment: DialogProtocols.MessageAttachment?
  public let deduplicationID: Swift.Int64
  public let date: Swift.Int64
  public init(type: DialogMessaging.DialogOneMessageRequestType, peer: DialogProtocols.DialogPeer, content: DialogProtocols.DialogMessageContentProtocol, attachment: DialogProtocols.MessageAttachment? = nil, deduplicationID: Swift.Int64 = Int64.random(in: Int64.min..<Int64.max), date: Swift.Int64 = Date.unixTimestamp, applyDelta: Swift.Bool)
}
public enum DialogOneMessageResultType : Swift.Int {
  case local
  case networkSuccess
  case networkFailed
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct DialogOneMessageResult {
  public let request: DialogMessaging.DialogOneMessageRequest
  public let type: DialogMessaging.DialogOneMessageResultType
  public let message: DialogProtocols.DialogMessage?
  public let seq: Swift.Int64?
}
public class DialogOneMessageService : DialogMessaging.DialogOneMessageServiceProtocol {
  public var perform: RxSwift.AnyObserver<DialogMessaging.DialogOneMessageRequest>
  public var result: RxSwift.Observable<DialogMessaging.DialogOneMessageResult>
  public init(authorId: Swift.String? = nil, channelService: DialogProtocols.DialogChannelServiceProtocol, updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol, seqService: DialogMessaging.DialogSeqUpdatesServiceProtocol, storage: DialogStorage.DialogStorageServiceProtocol, busEventsService: DialogProtocols.EventBusServiceProtocol, fileService: DialogFiles.DialogUploadFileServiceProtocol, metricsService: DialogMetrics.DialogMetricsServiceProtocol, isMock: Swift.Bool = false)
  @objc deinit
}
public protocol DialogOneMessageServiceProtocol {
  var perform: RxSwift.AnyObserver<DialogMessaging.DialogOneMessageRequest> { get }
  var result: RxSwift.Observable<DialogMessaging.DialogOneMessageResult> { get }
}
@_hasMissingDesignatedInitializers public class DialogPhotoMessageContent : DialogMessaging.DialogDocumentMessageContent {
  final public let photoSize: CoreGraphics.CGSize
  override public init(message: Dialog_gRPC_Objc.DocumentMessage)
  override public init(message: DialogSDK_GRPC.Dialog_DocumentMessage)
  public init(photoSize: CoreGraphics.CGSize, fileSource: DialogProtocols.DialogFile, mimeType: Swift.String, name: Swift.String, thumb: DialogProtocols.DialogFastThumb?)
  override public func encode(to encoder: Swift.Encoder) throws
  override public func map() -> DialogSDK_GRPC.Dialog_MessageContent
  override public init(fileSource: DialogProtocols.DialogFile, mimeType: Swift.String, name: Swift.String, thumb: DialogProtocols.DialogFastThumb?, uuid: Swift.String = super)
  @objc deinit
}
extension DialogReactionsPeerClock : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogReactionsPeerClock : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
public enum MessageReactionAction {
  case set(activeUserId: DialogProtocols.DialogUserId, peer: DialogProtocols.DialogPeer, mid: DialogProtocols.DialogUUID, code: Swift.String)
  case remove(activeUserId: DialogProtocols.DialogUserId, peer: DialogProtocols.DialogPeer, mid: DialogProtocols.DialogUUID, code: Swift.String)
}
public struct MessageReactionGetRequest {
  public let fromClock: Swift.Int64
  public let peer: DialogProtocols.DialogPeer
  public init(fromClock: Swift.Int64, peer: DialogProtocols.DialogPeer)
}
public class DialogReactionsService : DialogMessaging.DialogReactionsServiceProtocol {
  final public let performAction: RxSwift.AnyObserver<DialogMessaging.MessageReactionAction>
  final public let performGetReactions: RxSwift.AnyObserver<DialogMessaging.MessageReactionGetRequest>
  public init(channelService: DialogProtocols.DialogChannelServiceProtocol, updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol, eventBus: DialogProtocols.EventBusServiceProtocol, netService: DialogNetService.NetServiceProtocol, storage: DialogStorage.DialogStorageServiceProtocol)
  @objc deinit
}
public protocol DialogReactionsServiceProtocol {
  var performAction: RxSwift.AnyObserver<DialogMessaging.MessageReactionAction> { get }
  var performGetReactions: RxSwift.AnyObserver<DialogMessaging.MessageReactionGetRequest> { get }
}
extension DialogReactionsState {
  public static func add(with messagesReactions: [DialogProtocols.DialogMessageReaction]) -> (DialogProtocols.BusEvent, DialogProtocols.DialogReactionsState) -> DialogProtocols.DialogReactionsState
  public static func replace(with messagesReactions: [DialogProtocols.DialogMessageReaction]) -> (DialogProtocols.BusEvent, DialogProtocols.DialogReactionsState) -> DialogProtocols.DialogReactionsState
  public static func set(with activeUserId: DialogProtocols.DialogUserId, mid: DialogProtocols.DialogUUID, code: Swift.String) -> (DialogProtocols.BusEvent, DialogProtocols.DialogReactionsState) -> DialogProtocols.DialogReactionsState
  public static func remove(with activeUserId: DialogProtocols.DialogUserId, mid: DialogProtocols.DialogUUID, code: Swift.String) -> (DialogProtocols.BusEvent, DialogProtocols.DialogReactionsState) -> DialogProtocols.DialogReactionsState
}
public class DialogReadService : DialogMessaging.DialogReadServiceProtocol {
  public var read: RxSwift.AnyObserver<(DialogProtocols.DialogMessage, DialogProtocols.DialogPeer)>
  public init(eventBusService: DialogProtocols.EventBusServiceProtocol, channelService: DialogProtocols.DialogChannelServiceProtocol, taskProvider: DialogNetService.GRPCTaskProviderProtocol, isMock: Swift.Bool = false)
  @objc deinit
}
public protocol DialogReadServiceProtocol {
  var read: RxSwift.AnyObserver<(DialogProtocols.DialogMessage, DialogProtocols.DialogPeer)> { get }
}
extension DialogSeqState : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
public enum DialogSeqUpdatesError : Swift.Error {
  case seqUpdatesCallFinished(result: SwiftGRPC.CallResult)
  case getInitialStateFailed(result: SwiftGRPC.CallResult)
  case getDiffFailed(result: SwiftGRPC.CallResult)
}
public class DialogSeqUpdatesService : DialogMessaging.DialogSeqUpdatesServiceProtocol {
  final public let updatesInput: RxSwift.AnyObserver<DialogSDK_GRPC.Dialog_SeqUpdateBox>
  public var updatesStreamState: RxSwift.Observable<DialogMessaging.DialogSeqStreamState>
  final public let updates: RxSwift.Observable<DialogSDK_GRPC.Dialog_SeqUpdateBox>
  public var service: RxSwift.Observable<DialogSDK_GRPC.Dialog_SequenceAndUpdatesService>
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, userEventBus: DialogProtocols.UserEventBusServiceProtocol, eventService: DialogProtocols.EventBusServiceProtocol, metricsService: DialogMetrics.DialogMetricsServiceProtocol)
  @objc deinit
}
public class DialogSeqUpdatesServiceMock : DialogMessaging.DialogSeqUpdatesServiceProtocol {
  public var updates: RxSwift.Observable<DialogSDK_GRPC.Dialog_SeqUpdateBox>
  public var service: RxSwift.Observable<DialogSDK_GRPC.Dialog_SequenceAndUpdatesService>
  public var updatesStreamState: RxSwift.Observable<DialogMessaging.DialogSeqStreamState>
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol)
  @objc deinit
}
public enum DialogSeqStreamState {
  case connecting
  case connected
  public static func == (a: DialogMessaging.DialogSeqStreamState, b: DialogMessaging.DialogSeqStreamState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol DialogSeqUpdatesServiceProtocol {
  var updates: RxSwift.Observable<DialogSDK_GRPC.Dialog_SeqUpdateBox> { get }
  var service: RxSwift.Observable<DialogSDK_GRPC.Dialog_SequenceAndUpdatesService> { get }
  var updatesStreamState: RxSwift.Observable<DialogMessaging.DialogSeqStreamState> { get }
}
public func simulateWaiting(for time: Foundation.TimeInterval)
public protocol DialogServerMockProtocol {
  func simulateUnreadCounterUpdate(from peerId: Swift.Int32, counterValue count: Swift.Int32)
  func simulateGotMessage(from peerId: Swift.Int32, message: DialogProtocols.DialogMessageContentProtocol)
}
@_hasMissingDesignatedInitializers public class DialogServerMock : DialogMessaging.DialogServerMockProtocol {
  public func simulateUnreadCounterUpdate(from peerId: Swift.Int32, counterValue count: Swift.Int32)
  public func simulateGotMessage(from peerId: Swift.Int32, message: DialogProtocols.DialogMessageContentProtocol)
  @objc deinit
}
extension DialogServerMock {
  public func bakeAndSendUpdateToService(update: DialogSDK_GRPC.Dialog_UpdateSeqUpdate.OneOf_Update)
}
public class DialogService : DialogMessaging.DialogServiceProtocol {
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, requestService: DialogProtocols.DialogRequestServiceProtocol, eventBus: DialogProtocols.EventBusServiceProtocol, taskProvider: DialogNetService.GRPCTaskProviderProtocol, netService: DialogNetService.NetServiceProtocol, metricsService: DialogMetrics.DialogMetricsServiceProtocol, isMock: Swift.Bool = false)
  public func addDialogToFavourites(_ dialog: DialogProtocols.DialogState) -> RxSwift.Observable<Swift.Void>
  public func removeDialogFromFavourites(_ dialog: DialogProtocols.DialogState) -> RxSwift.Observable<Swift.Void>
  public func deleteDialog(_ dialog: DialogProtocols.DialogState, eventBusService: DialogProtocols.EventBusServiceProtocol) -> RxSwift.Observable<Swift.Void>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DialogServiceMessageContent : DialogProtocols.DialogMessageContentProtocol, Swift.Equatable {
  public static func == (lhs: DialogMessaging.DialogServiceMessageContent, rhs: DialogMessaging.DialogServiceMessageContent) -> Swift.Bool
  public var isContentUploaded: Swift.Bool
  final public let text: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public func map() -> DialogSDK_GRPC.Dialog_MessageContent
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageUserInvitedContent : DialogMessaging.DialogServiceMessageContent {
  final public var invitedUid: Swift.Int32
  required public init(from decoder: Swift.Decoder) throws
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageUserJoinedContent : DialogMessaging.DialogServiceMessageContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DialogServiceMessageDeleteContent : DialogProtocols.DialogMessageContentProtocol {
  final public var isContentUploaded: Swift.Bool
  final public func map() -> DialogSDK_GRPC.Dialog_MessageContent
  final public func isEqual(to other: DialogProtocols.DialogMessageContentProtocol) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageUserKickedContent : DialogMessaging.DialogServiceMessageContent {
  final public var kickedUid: Swift.Int32
  required public init(from decoder: Swift.Decoder) throws
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageUserLeftContent : DialogMessaging.DialogServiceMessageContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageGroupCreatedContent : DialogMessaging.DialogServiceMessageContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageChangedShortnameContent : DialogMessaging.DialogServiceMessageContent {
  final public var shortname: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageChangedTitleContent : DialogMessaging.DialogServiceMessageContent {
  final public var title: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageChangedTopicContent : DialogMessaging.DialogServiceMessageContent {
  final public var topic: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageChangedAboutContent : DialogMessaging.DialogServiceMessageContent {
  final public var about: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageChangedAvatarContent : DialogMessaging.DialogServiceMessageContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageContactRegisteredContent : DialogMessaging.DialogServiceMessageContent {
  final public var uid: Swift.Int32
  required public init(from decoder: Swift.Decoder) throws
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DialogServiceMessagePhoneContent : DialogMessaging.DialogServiceMessageContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessagePhoneMissedContent : DialogMessaging.DialogServiceMessagePhoneContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessagePhoneRejectedContent : DialogMessaging.DialogServiceMessagePhoneContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessagePhoneCallContent : DialogMessaging.DialogServiceMessagePhoneContent {
  final public var duration: Swift.Int32
  required public init(from decoder: Swift.Decoder) throws
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageChatArchivedContent : DialogMessaging.DialogServiceMessageContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DialogServiceMessageChatRestoredContent : DialogMessaging.DialogServiceMessageContent {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public protocol DialogServiceProtocol {
  func addDialogToFavourites(_ dialog: DialogProtocols.DialogState) -> RxSwift.Observable<Swift.Void>
  func removeDialogFromFavourites(_ dialog: DialogProtocols.DialogState) -> RxSwift.Observable<Swift.Void>
  func deleteDialog(_ dialog: DialogProtocols.DialogState, eventBusService: DialogProtocols.EventBusServiceProtocol) -> RxSwift.Observable<Swift.Void>
}
public class DialogsListService : DialogMessaging.DialogsListServiceProtocol {
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol, weakUpdatesService: DialogMessaging.DialogWeakUpdatesServiceObjcProtocol, featureFlagsService: DialogProtocols.DialogFeatureFlagsServiceProtocol, storage: DialogStorage.DialogStorageServiceProtocol, eventBusService: DialogProtocols.EventBusServiceProtocol, taskProvider: DialogNetService.GRPCTaskProviderProtocol, activeUserId: DialogProtocols.DialogUserId, isMock: Swift.Bool = false)
  @objc deinit
}
public protocol DialogsListServiceProtocol {
}
extension DialogState {
  public var eventMetricLabel: DialogMetrics.DialogEventMetric.Label {
    get
  }
}
extension DialogState : Swift.Codable, DialogStorage.DialogStoragableProtocol {
  public init(peer: DialogProtocols.DialogPeer, author: DialogProtocols.DialogUser? = nil, avatarIndex: DialogProtocols.DialogFileIndex? = nil, lastMessageDate: Swift.Int64, type: DialogProtocols.PeerType? = nil, title: Swift.String? = nil, isIndex: Swift.Bool, isFavourite: Swift.Bool = false)
  public init(index: DialogSDK_GRPC.Dialog_DialogIndex)
  public init(_ response: DialogProtocols.DialogGroup.Create.Response)
  public init(dialog: DialogSDK_GRPC.Dialog_Dialog, previous: DialogProtocols.DialogListState)
  public func apply(response: DialogSDK_GRPC.Dialog_ResponseLoadDialogs, entities: DialogSDK_GRPC.Dialog_ResponseGetReferencedEntitites) -> (DialogProtocols.DialogState, DialogProtocols.DialogMessage?)
  public func apply(difference: DialogSDK_GRPC.Dialog_ResponseGetDialogsDifference, entities: DialogSDK_GRPC.Dialog_ResponseGetReferencedEntitites) -> (DialogProtocols.DialogState, DialogProtocols.DialogMessage?)
  public func apply(_ weakUpdate: Dialog_gRPC_Objc.WeakUpdateBox, lastMessagesState: DialogProtocols.DialogLastMessagesState) throws -> (DialogProtocols.DialogState, DialogProtocols.DialogLastMessagesState)
  public func apply(_ update: DialogSDK_GRPC.Dialog_UpdateSeqUpdate, lastMessagesState: DialogProtocols.DialogLastMessagesState) throws -> (DialogProtocols.DialogState, DialogProtocols.DialogLastMessagesState)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var tableName: Swift.String {
    get
  }
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogState : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension DialogSticker {
  public func cached(fileService: DialogFiles.DialogFileServiceProtocol) -> UIKit.UIImage?
}
extension DialogStickerCollectionState : DialogStorage.DialogStoragableProtocol {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogStickerPack : DialogStorage.DialogStoragableProtocol {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogSticker : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogStickerCollectionState {
  public static func union() -> (DialogProtocols.BusEvent, DialogProtocols.DialogStickerCollectionState) -> DialogProtocols.DialogStickerCollectionState
}
public class DialogStickersService : DialogMessaging.DialogStickersServiceProtocol {
  public init(channelService: DialogProtocols.DialogChannelServiceProtocol, requestService: DialogProtocols.DialogRequestServiceProtocol, eventBus: DialogProtocols.EventBusServiceProtocol, seqService: DialogMessaging.DialogSeqUpdatesServiceProtocol, storageService: DialogStorage.DialogStorageServiceProtocol)
  @objc deinit
}
public protocol DialogStickersServiceProtocol {
}
public protocol DialogStickersStorageServiceProtocol {
  func sticker(with index: DialogProtocols.DialogFileIndex) -> RxSwift.Observable<UIKit.UIImage?>
}
final public class DialogStickersStorageService : DialogMessaging.DialogStickersStorageServiceProtocol {
  public init(channelService: DialogProtocols.DialogChannelServiceProtocol, eventBus: DialogProtocols.EventBusServiceProtocol, challengeResolver: DialogProtocols.URLAuthenticationChallengeResolverProtocol?) throws
  final public func sticker(with index: DialogProtocols.DialogFileIndex) -> RxSwift.Observable<UIKit.UIImage?>
  @objc deinit
}
public struct DialogTextMessageContent : Swift.Codable, DialogProtocols.DialogMessageContentProtocol, Swift.Equatable {
  public var isContentUploaded: Swift.Bool
  public let text: Swift.String
  public let media: [DialogMessaging.DialogMessageMedia]
  public init(text: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogTextMessageContent, b: DialogMessaging.DialogTextMessageContent) -> Swift.Bool
}
extension DialogTextMessageContent : DialogProtocols.DialogMessageContentMappable {
  public func map() -> DialogSDK_GRPC.Dialog_MessageContent
}
public struct DialogUndefinedMessageContent : Swift.Codable, DialogProtocols.DialogMessageContentProtocol, Swift.Equatable {
  public var isContentUploaded: Swift.Bool
  public func map() -> DialogSDK_GRPC.Dialog_MessageContent
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DialogMessaging.DialogUndefinedMessageContent, b: DialogMessaging.DialogUndefinedMessageContent) -> Swift.Bool
}
extension DialogUnreadCountState : Swift.Codable, DialogStorage.DialogStoragableProtocol {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case peerId
    case count
    case peerType
    case lastReadDate
    case lastMessageDate
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init(dialog: DialogSDK_GRPC.Dialog_Dialog)
  public init(entity: DialogSDK_GRPC.Dialog_DialogListEntry)
  public init(update: DialogSDK_GRPC.Dialog_UpdateMessageReadByMe, previous: DialogProtocols.DialogUnreadCountState?)
  public init(readByMe: Dialog_gRPC_Objc.UpdateMessageReadByMe, previous: DialogProtocols.DialogUnreadCountState?)
  public init(message: Dialog_gRPC_Objc.UpdateMessage, previous: DialogProtocols.DialogUnreadCountState?, activeUserId: DialogProtocols.DialogUserId)
  public init(update: DialogSDK_GRPC.Dialog_UpdateMessage, previous: DialogProtocols.DialogUnreadCountState?, activeUserId: DialogProtocols.DialogUserId)
  public init(peer: DialogProtocols.DialogPeer, message: DialogProtocols.DialogMessage, localMessages: DialogProtocols.DialogMessagesList, lastMessage: DialogProtocols.DialogMessage?, previous: DialogProtocols.DialogUnreadCountState?)
  public static func states(of updates: [DialogSDK_GRPC.Dialog_UpdateSeqUpdate], deletedDialogsState: DialogProtocols.DialogListState) -> [DialogProtocols.DialogUnreadCountState]
  public func apply(new state: DialogProtocols.DialogUnreadCountState?) -> DialogProtocols.DialogUnreadCountState
  public func needToUpdate(from state: DialogProtocols.DialogUnreadCountState) -> Swift.Bool
  public var tableName: Swift.String {
    get
  }
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogUnreadCountState : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class DialogUpdatesConsistencyService : DialogMessaging.DialogUpdatesConsistencyServiceProtocol {
  public init(updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol)
  @objc deinit
}
public protocol DialogUpdatesConsistencyServiceProtocol {
}
extension DialogUser : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogUser : GRDB.MutablePersistableRecord {
  public static let persistenceConflictPolicy: GRDB.PersistenceConflictPolicy
}
extension DialogUser : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogUser {
  public static func select(id: DialogProtocols.DialogUserId) -> (Swift.String, GRDB.StatementArguments?)
}
extension DialogUser {
  public func toUserOutPeer() -> DialogSDK_GRPC.Dialog_UserOutPeer
}
extension DialogUser {
  public func toPeer() -> DialogProtocols.DialogPeer
}
extension DialogUser {
  public func apply(update: DialogSDK_GRPC.Dialog_UpdateUser) -> DialogProtocols.DialogUser
}
extension Array where Element == DialogProtocols.DialogUser {
  public enum SortBy {
    case byName
    public static func == (a: Swift.Array<Element>.SortBy, b: Swift.Array<Element>.SortBy) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func == (lhs: [DialogProtocols.DialogUser], rhs: [DialogProtocols.DialogUser]) -> Swift.Bool
  public func sorted(by type: (Swift.Array<Element>.SortBy)) -> [DialogProtocols.DialogUser]
}
extension Sequence where Self.Element == DialogSDK_GRPC.Dialog_User {
  public func nativeUsers() -> [DialogProtocols.DialogUser]
}
extension DialogUser {
  public func mapToObsoletePeer() -> DialogSDK_GRPC.Dialog_ObsoletePeer
  public func mapToObjcPeer() -> Dialog_gRPC_Objc.Peer
  public func mapToPeer() -> DialogSDK_GRPC.Dialog_Peer
}
extension DialogUsersPresenceState {
  public static func onUpdate() -> (DialogProtocols.BusEvent, DialogProtocols.DialogUsersPresenceState) -> DialogProtocols.DialogUsersPresenceState
}
extension DialogUserPresenceState : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DialogUserPresenceState : GRDB.MutablePersistableRecord {
  public static let persistenceConflictPolicy: GRDB.PersistenceConflictPolicy
}
extension DialogUserPresenceState : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
public class DialogUserService : DialogProtocols.DialogUserServiceProtocol {
  final public let loadUsers: RxSwift.AnyObserver<[DialogProtocols.DialogUserId]>
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol, eventBusService: DialogProtocols.EventBusServiceProtocol, netService: DialogNetService.NetServiceProtocol)
  public func loadUserData(request: DialogProtocols.DialogFetchUsersRequest) -> RxSwift.Observable<[DialogProtocols.DialogUser]>
  public func getReferencedEntities(request: DialogProtocols.DialogFetchUsersRequest) -> RxSwift.Observable<[DialogProtocols.DialogUser]>
  @objc deinit
}
extension Dialog_ResponseLoadUserData {
  public var asUsersArray: [DialogProtocols.DialogUser] {
    get
  }
}
extension DialogUserPresenceState {
  public init?(previous: DialogProtocols.DialogUsersPresenceState, update updateBox: Dialog_gRPC_Objc.WeakUpdateBox)
  public init?(previous: DialogProtocols.DialogUsersPresenceState, update: DialogSDK_GRPC.Dialog_WeakUpdateBox.OneOf_Updatebox)
}
@_hasMissingDesignatedInitializers public class DialogVideoMessageContent : DialogMessaging.DialogDocumentMessageContent {
  final public let videoSize: CoreGraphics.CGSize
  final public let duration: Swift.Int32
  override public init(message: Dialog_gRPC_Objc.DocumentMessage)
  override public init(message: DialogSDK_GRPC.Dialog_DocumentMessage)
  public init(videoSize: CoreGraphics.CGSize, duration: Swift.Int32, fileSource: DialogProtocols.DialogFile, mimeType: Swift.String, name: Swift.String, thumb: DialogProtocols.DialogFastThumb?)
  override public func encode(to encoder: Swift.Encoder) throws
  override public func map() -> DialogSDK_GRPC.Dialog_MessageContent
  override public init(fileSource: DialogProtocols.DialogFile, mimeType: Swift.String, name: Swift.String, thumb: DialogProtocols.DialogFastThumb?, uuid: Swift.String = super)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DialogVoiceMessageContent : DialogMessaging.DialogDocumentMessageContent {
  final public let duration: Swift.Int32
  override public init(message: Dialog_gRPC_Objc.DocumentMessage)
  override public init(message: DialogSDK_GRPC.Dialog_DocumentMessage)
  public init(duration: Swift.Int32, fileSource: DialogProtocols.DialogFile, mimeType: Swift.String, name: Swift.String, thumb: DialogProtocols.DialogFastThumb?)
  override final public func encode(to encoder: Swift.Encoder) throws
  override final public func map() -> DialogSDK_GRPC.Dialog_MessageContent
  override public init(fileSource: DialogProtocols.DialogFile, mimeType: Swift.String, name: Swift.String, thumb: DialogProtocols.DialogFastThumb?, uuid: Swift.String = super)
  @objc deinit
}
extension DialogWeakMessagesInterval {
  public static func merge() -> (DialogProtocols.BusEvent, DialogProtocols.DialogWeakMessagesInterval) -> DialogProtocols.DialogWeakMessagesInterval
  public static func override() -> (DialogProtocols.BusEvent, DialogProtocols.DialogWeakMessagesInterval) -> DialogProtocols.DialogWeakMessagesInterval
  public static func flush() -> (DialogProtocols.BusEvent, DialogProtocols.DialogWeakMessagesInterval) -> DialogProtocols.DialogWeakMessagesInterval
}
extension DialogWeakMessagesInterval {
  final public func apply(update: DialogSDK_GRPC.Dialog_WeakUpdateBox) throws -> DialogProtocols.DialogWeakMessagesInterval
  final public func apply(update updateBox: Dialog_gRPC_Objc.WeakUpdateBox) throws -> DialogProtocols.DialogWeakMessagesInterval
  final public func canUpdate(_ updateBox: DialogSDK_GRPC.Dialog_WeakUpdateBox) -> Swift.Bool
  final public func canUpdate(_ updateBox: Dialog_gRPC_Objc.WeakUpdateBox) -> Swift.Bool
}
extension DialogWeakMessagesInterval {
  final public var isValid: Swift.Bool {
    get
  }
  final public func checkConsistent() throws
}
public class DialogWeakMessagesService : DialogMessaging.DialogWeakMessagesServiceProtocol {
  final public let shouldSendRequest: RxSwift.Observable<DialogProtocols.DialogMessagesRequest>
  public init(for peer: DialogProtocols.DialogPeer, activeUserId: DialogProtocols.DialogUserId, eventBus: DialogProtocols.EventBusServiceProtocol, updatesService: DialogMessaging.DialogWeakUpdatesServiceObjcProtocol, isMock: Swift.Bool = false, isEnabled: Swift.Bool = true)
  @objc deinit
}
public class DialogWeakMessagesUpdatesService : DialogMessaging.DialogWeakMessagesUpdatesServiceProtocol {
  public init(eventBus: DialogProtocols.EventBusServiceProtocol, updatesService: DialogMessaging.DialogWeakUpdatesServiceObjcProtocol, isMock: Swift.Bool = false, isEnabled: Swift.Bool = true)
  @objc deinit
}
public enum DialogWeakUpdatesError : Swift.Error {
  case weakUpdatesCallFinished(result: SwiftGRPC.CallResult)
}
final public class DialogWeakUpdatesService : DialogMessaging.DialogWeakUpdatesServiceObjcProtocol {
  public static let updatesStreamRestoreInterval: Swift.Double
  final public let updatesCall: RxSwift.AnyObserver<Dialog_gRPC_Objc.WeakUpdateCommand>
  final public let updates: RxSwift.Observable<Dialog_gRPC_Objc.WeakUpdateBox>
  final public let reconnectedCall: RxSwift.Observable<Swift.Void>
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, featureFlagsService: DialogProtocols.DialogFeatureFlagsServiceProtocol, eventBusService: DialogProtocols.EventBusServiceProtocol, userEventBusService: DialogProtocols.UserEventBusServiceProtocol)
  @objc deinit
}
public protocol GRPCServiceProtocol {
  func next(_ command: Protobuf.GPBMessage)
}
public protocol GRPCResponseHandlerProtocol : ObjectiveC.NSObject, ProtoRPC.GRPCProtoResponseHandler {
  var updates: RxSwift.Observable<Protobuf.GPBMessage> { get }
  var didCloseBlock: ([Swift.AnyHashable : Any]?, Swift.Error?) -> Swift.Void { get set }
}
@_hasMissingDesignatedInitializers final public class GRPCService<T> : DialogMessaging.GRPCServiceProtocol where T : ProtoRPC.GRPCStreamingProtoCall {
  @_hasMissingDesignatedInitializers public class GRPCResponseHandler : ObjectiveC.NSObject, DialogMessaging.GRPCResponseHandlerProtocol {
    @objc final public let dispatchQueue: Dispatch.DispatchQueue
    final public let updates: RxSwift.Observable<Protobuf.GPBMessage>
    public var didCloseBlock: ([Swift.AnyHashable : Any]?, Swift.Error?) -> Swift.Void
    @objc public func didReceiveInitialMetadata(_ initialMetadata: [Swift.AnyHashable : Any]?)
    @objc public func didReceiveProtoMessage(_ message: Protobuf.GPBMessage?)
    @objc public func didWriteMessage()
    @objc public func didClose(withTrailingMetadata trailingMetadata: [Swift.AnyHashable : Any]?, error: Swift.Error?)
    @objc deinit
    @objc override dynamic public init()
  }
  final public let responseHandler: DialogMessaging.GRPCResponseHandlerProtocol
  final public let dispatchQueue: Dispatch.DispatchQueue
  final public func next(_ command: Protobuf.GPBMessage)
  @objc deinit
}
public class DialogWeakUpdatesServiceObjcMock : DialogMessaging.DialogWeakUpdatesServiceObjcProtocol {
  public var updatesCall: RxSwift.AnyObserver<Dialog_gRPC_Objc.WeakUpdateCommand>
  public var reconnectedCall: RxSwift.Observable<Swift.Void>
  public var updates: RxSwift.Observable<Dialog_gRPC_Objc.WeakUpdateBox>
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol)
  @objc deinit
}
public class DialogWeakUpdatesServiceMock : DialogMessaging.DialogWeakUpdatesServiceProtocol {
  final public let updates: RxSwift.Observable<DialogSDK_GRPC.Dialog_WeakUpdateBox>
  final public let service: RxSwift.Observable<DialogSDK_GRPC.Dialog_ObsoleteServiceClient>
  public var updatesCall: RxSwift.Observable<DialogSDK_GRPC.Dialog_SequenceAndUpdatesWeakUpdatesCall> {
    get
  }
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol)
  @objc deinit
}
public protocol DialogWeakUpdatesServiceProtocol {
  var updates: RxSwift.Observable<DialogSDK_GRPC.Dialog_WeakUpdateBox> { get }
  var updatesCall: RxSwift.Observable<DialogSDK_GRPC.Dialog_SequenceAndUpdatesWeakUpdatesCall> { get }
}
public protocol DialogWeakUpdatesServiceObjcProtocol : AnyObject {
  var updatesCall: RxSwift.AnyObserver<Dialog_gRPC_Objc.WeakUpdateCommand> { get }
  var updates: RxSwift.Observable<Dialog_gRPC_Objc.WeakUpdateBox> { get }
  var reconnectedCall: RxSwift.Observable<Swift.Void> { get }
}
public protocol LocalSyncPersistanceServiceProtocol {
  func syncGroup(_ groupId: DialogProtocols.DialogGroupId, largeAvatar: DialogProtocols.DialogFile?)
  func syncGroup(_ groupId: DialogProtocols.DialogGroupId, title: Swift.String)
  func syncGroup(_ groupId: DialogProtocols.DialogGroupId, shortname: Swift.String?)
  func syncGroup(_ groupId: DialogProtocols.DialogGroupId, about: Swift.String?)
  func syncGroup(_ groupId: DialogProtocols.DialogGroupId, membersAmount: Swift.Int)
  func syncGroup(_ groupId: DialogProtocols.DialogGroupId, membersAmountDiff: Swift.Int)
  func syncGroup(_ groupId: DialogProtocols.DialogGroupId, creatorId: DialogProtocols.DialogUserId)
  func syncGroup(_ groupId: DialogProtocols.DialogGroupId, conferenceLink: Swift.String?)
  func syncDialog(_ peerId: Swift.Int32, title: Swift.String)
  func syncDialog(_ peerId: Swift.Int32, avatar: DialogProtocols.DialogFile?)
  func syncMembers(in group: DialogProtocols.DialogGroupId, usersForRemove: [DialogProtocols.DialogUserId])
  func syncMembers(in group: DialogProtocols.DialogGroupId, usersForAdd: [DialogProtocols.DialogUserId : DialogProtocols.DialogGroupMember])
}
extension MessageAttachment : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension String : DialogProtocols.InputMessage & DialogProtocols.Validatable {
  public func validate() -> DialogProtocols.MessageValidationResult
}
extension String : DialogProtocols.Formattable {
  public func format() -> DialogProtocols.MessageFormatResult<Swift.String>
}
public class MessageValidationService : DialogProtocols.MessageValidationServiceProtocol, DialogProtocols.MessagePreFormattingServiceProtocol {
  public init()
  public func performValidation(request: DialogProtocols.MessageValidationRequest) -> DialogProtocols.MessageValidationResult
  public func format<T>(request: DialogProtocols.MessageFormatRequest<T>) -> DialogProtocols.MessageFormatResult<T> where T : DialogProtocols.Formattable
  @objc deinit
}
extension Reactive where Base == Swift.String {
  public func validateMessage(service: DialogProtocols.MessageValidationServiceProtocol) -> RxSwift.Observable<DialogProtocols.MessageValidationResult>
}
public protocol MessagingPeristenceServiceProtocol : DialogMessaging.LocalSyncPersistanceServiceProtocol {
}
public class MessagingPersistanceService : DialogMessaging.MessagingPeristenceServiceProtocol {
  public init(eventBusService: DialogProtocols.EventBusServiceProtocol, storageService: DialogStorage.DialogStorageServiceProtocol)
  @objc deinit
}
extension MessagingPersistanceService : DialogMessaging.LocalSyncPersistanceServiceProtocol {
  public func syncGroup(_ groupId: DialogProtocols.DialogGroupId, largeAvatar: DialogProtocols.DialogFile?)
  public func syncGroup(_ groupId: DialogProtocols.DialogGroupId, title: Swift.String)
  public func syncGroup(_ groupId: DialogProtocols.DialogGroupId, shortname: Swift.String?)
  public func syncGroup(_ groupId: DialogProtocols.DialogGroupId, about: Swift.String?)
  public func syncGroup(_ groupId: DialogProtocols.DialogGroupId, membersAmount: Swift.Int)
  public func syncGroup(_ groupId: DialogProtocols.DialogGroupId, membersAmountDiff: Swift.Int)
  public func syncGroup(_ groupId: DialogProtocols.DialogGroupId, creatorId: DialogProtocols.DialogUserId)
  public func syncGroup(_ groupId: DialogProtocols.DialogGroupId, conferenceLink link: Swift.String?)
  public func syncDialog(_ peerId: Swift.Int32, title: Swift.String)
  public func syncDialog(_ peerId: Swift.Int32, avatar: DialogProtocols.DialogFile?)
  public func syncMembers(in group: DialogProtocols.DialogGroupId, usersForRemove: [DialogProtocols.DialogUserId])
  public func syncMembers(in group: DialogProtocols.DialogGroupId, usersForAdd: [DialogProtocols.DialogUserId : DialogProtocols.DialogGroupMember])
}
extension Dialog_PeerType {
  public var map: DialogProtocols.PeerType {
    get
  }
}
extension Sequence {
  public func toDictionary<Key>(with selectKey: (Self.Iterator.Element) -> Key) -> [Key : Self.Iterator.Element] where Key : Swift.Hashable
}
extension DialogProtocols.DialogGroupMember.CodingKeys : Swift.Equatable {}
extension DialogProtocols.DialogGroupMember.CodingKeys : Swift.Hashable {}
extension DialogProtocols.DialogGroupMember.CodingKeys : Swift.RawRepresentable {}
extension DialogProtocols.DialogGroupMembersState.UpdateType : Swift.Equatable {}
extension DialogProtocols.DialogGroupMembersState.UpdateType : Swift.Hashable {}
extension DialogMessaging.DialogInteractiveMediaStyle : Swift.Equatable {}
extension DialogMessaging.DialogInteractiveMediaStyle : Swift.Hashable {}
extension DialogMessaging.DialogInteractiveMediaStyle : Swift.RawRepresentable {}
extension DialogProtocols.DialogLastMessageEdit.CodingKeys : Swift.Equatable {}
extension DialogProtocols.DialogLastMessageEdit.CodingKeys : Swift.Hashable {}
extension DialogProtocols.DialogLastMessageEdit.CodingKeys : Swift.RawRepresentable {}
extension DialogMessaging.DialogOneMessageRequestType : Swift.Equatable {}
extension DialogMessaging.DialogOneMessageRequestType : Swift.Hashable {}
extension DialogMessaging.DialogOneMessageRequestType : Swift.RawRepresentable {}
extension DialogMessaging.DialogOneMessageResultType : Swift.Equatable {}
extension DialogMessaging.DialogOneMessageResultType : Swift.Hashable {}
extension DialogMessaging.DialogOneMessageResultType : Swift.RawRepresentable {}
extension DialogMessaging.DialogSeqStreamState : Swift.Equatable {}
extension DialogMessaging.DialogSeqStreamState : Swift.Hashable {}
extension DialogProtocols.DialogUnreadCountState.CodingKeys : Swift.Equatable {}
extension DialogProtocols.DialogUnreadCountState.CodingKeys : Swift.Hashable {}
extension DialogProtocols.DialogUnreadCountState.CodingKeys : Swift.RawRepresentable {}
