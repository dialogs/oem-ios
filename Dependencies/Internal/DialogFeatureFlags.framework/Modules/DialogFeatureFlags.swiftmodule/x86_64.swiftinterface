// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DialogFeatureFlags
@_exported import DialogFeatureFlags
import DialogMessaging
import DialogProtocols
import DialogSDK_GRPC
import DialogStorage
import DialogSwiftGRPCExtra
import Foundation
import GRDB
import RxSwift
import Swift
import SwiftGRPC
extension DialogFeatureFlag : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
}
public class DialogFeatureFlagsService : DialogProtocols.DialogFeatureFlagsServiceProtocol {
  final public let loadFeatureFlags: RxSwift.AnyObserver<Swift.Void>
  public var updateFeatureFlagsLocaly: RxSwift.AnyObserver<DialogProtocols.DialogFeatureFlagsState>
  final public let didLoadFeatureFlags: RxSwift.Observable<Swift.Void>
  final public let featureFlags: RxSwift.Observable<DialogProtocols.DialogFeatureFlagsState>
  final public let discoverTabLinkFeatureFlag: RxSwift.Observable<Swift.String>
  final public let miniAppUrl: RxSwift.Observable<Swift.String>
  final public let messageForwardingFeatureFlag: RxSwift.Observable<Swift.Bool>
  final public let bubbleMessageStyleListFlag: RxSwift.Observable<Swift.Bool>
  final public let profileOpeningFeatureFlag: RxSwift.Observable<Swift.Bool>
  final public let contactsTabFeatureFlag: RxSwift.Observable<Swift.Bool>
  final public let searchUserSecondaryInfoKeyFlag: RxSwift.Observable<Swift.String>
  final public let callsEnabledFeatureFlag: RxSwift.Observable<Swift.Bool>
  final public let videoCallsEnabledFeatureFlag: RxSwift.Observable<Swift.Bool>
  final public let audioCallsEnabledFeatureFlag: RxSwift.Observable<Swift.Bool>
  final public let extPhoneCallsEnabledFeatureFlag: RxSwift.Observable<Swift.Bool>
  final public let presentCallWithoutVoipEnabledFeatureFlag: RxSwift.Observable<Swift.Bool>
  final public let customProfileEnabled: RxSwift.Observable<Swift.Bool>
  final public let customProfileSchema: RxSwift.Observable<DialogProtocols.DialogCustomProfileSchema>
  final public let fileUploadMaxSizeFeatureFlag: RxSwift.Observable<Swift.Int>
  final public let mentionsInputEnabled: RxSwift.Observable<Swift.Bool>
  final public let onlineStatusTimeout: RxSwift.Observable<Swift.Int>
  final public let onlineStatusEnabled: RxSwift.Observable<Swift.Bool>
  final public let weakMessagingEnabled: RxSwift.Observable<Swift.Bool>
  final public let anyWeakEnabled: RxSwift.Observable<Swift.Bool>
  final public let isGroupLeavePermissionEnabled: RxSwift.Observable<Swift.Bool>
  public var chatSharedMediaIsEnabled: RxSwift.Observable<Swift.Bool>
  public var callsHistorySceneEnabled: RxSwift.Observable<Swift.Bool>
  public var callsHistoryServiceEnabled: RxSwift.Observable<Swift.Bool>
  public var isAudioMessagesEnabled: RxSwift.BehaviorSubject<Swift.Bool>
  public var isAudioTranscribingEnabled: RxSwift.BehaviorSubject<Swift.Bool>
  public var isGroupInviteLinkEnabled: RxSwift.Observable<Swift.Bool>
  public var isGroupIntegrationLinkEnabled: RxSwift.Observable<Swift.Bool>
  public var groupsPublicUrlPrefix: RxSwift.Observable<Swift.String>
  public var isReactionsEnabled: RxSwift.Observable<Swift.Bool>
  public var listAvailableReactions: RxSwift.Observable<[Swift.String]>
  public var groupTitleMinLength: RxSwift.Observable<Swift.Int>
  public var groupTitleMaxLength: RxSwift.Observable<Swift.Int>
  public var isConferenceAnnounced: RxSwift.BehaviorSubject<Swift.Bool>
  public var isConferenceEnabled: RxSwift.BehaviorSubject<Swift.Bool>
  final public let isImmediatelySendToRecentContact: RxSwift.BehaviorSubject<Swift.Bool>
  final public let groupMembersMaxCount: RxSwift.Observable<Swift.Int>
  final public let channelMembersMaxCount: RxSwift.Observable<Swift.Int>
  final public let forwardsRecipientsLimit: RxSwift.Observable<Swift.Int>
  public var isFavoriteEnabled: RxSwift.Observable<Swift.Bool>
  public var callsMetricsInterval: RxSwift.Observable<Swift.Int>
  final public let isTypingEnabled: RxSwift.Observable<Swift.Bool>
  final public let typingTimeout: RxSwift.Observable<Swift.Int>
  final public let isChatsMarkdownEnabled: RxSwift.Observable<Swift.Bool>
  final public let isLastMessagesMarkdownEnabled: RxSwift.Observable<Swift.Bool>
  final public let isProfileMarkdownEnabled: RxSwift.Observable<Swift.Bool>
  required public init(channelService: DialogProtocols.DialogChannelServiceProtocol, updatesService: DialogMessaging.DialogSeqUpdatesServiceProtocol, storageService: DialogStorage.DialogStorageServiceProtocol, appConfig: DialogProtocols.DialogFeatureFlagsState? = nil)
  @objc deinit
}
public protocol DialogFeatureFlagSyncTaskPerformerProtocol {
  var updates: RxSwift.Observable<DialogProtocols.DialogFeatureFlag> { get }
  func loadFlags(clock: DialogProtocols.DialogFeatureFlag.Clock) -> RxSwift.Single<[DialogProtocols.DialogFeatureFlag]>
}
final public class DialogFeatureFlagSyncTaskPerformer : DialogFeatureFlags.DialogFeatureFlagSyncTaskPerformerProtocol {
  final public let updates: RxSwift.Observable<DialogProtocols.DialogFeatureFlag>
  public init(service: RxSwift.Observable<DialogSDK_GRPC.Dialog_ConfigSyncService>, updatesService: RxSwift.Observable<DialogSDK_GRPC.Dialog_UpdateFeatureFlagChanged>)
  final public func loadFlags(clock: DialogProtocols.DialogFeatureFlag.Clock) -> RxSwift.Single<[DialogProtocols.DialogFeatureFlag]>
  @objc deinit
}
public protocol FeatureFlagServiceProtocol : AnyObject {
  var reload: RxSwift.AnyObserver<Swift.Void> { get }
  func flag(key: DialogProtocols.DialogFeatureFlag.Key) -> RxSwift.Observable<Swift.String?>
  func set(value: Swift.String, key: DialogProtocols.DialogFeatureFlag.Key) -> RxSwift.Completable
}
extension FeatureFlagServiceProtocol {
  public func accessor<Converter>(key: DialogProtocols.DialogFeatureFlag.Key, converter: Converter) -> DialogFeatureFlags.DialogFeatureFlagAccessor<Converter.ValueType> where Converter : DialogFeatureFlags.DialogFeatureFlagValueConverterProtocol
}
final public class FeatureFlagService : DialogFeatureFlags.FeatureFlagServiceProtocol {
  public enum FeatureFlagLevel : Swift.Int {
    case clientDefault
    case server
    case clientCustom
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  final public var reload: RxSwift.AnyObserver<Swift.Void>
  public init(defaults: [DialogProtocols.DialogFeatureFlag], storage: DialogFeatureFlags.DialogFeatureFlagStorageServiceProtocol, taskPerformer: DialogFeatureFlags.DialogFeatureFlagSyncTaskPerformerProtocol)
  final public func flag(key: DialogProtocols.DialogFeatureFlag.Key) -> RxSwift.Observable<Swift.String?>
  final public func set(value: Swift.String, key: DialogProtocols.DialogFeatureFlag.Key) -> RxSwift.Completable
  final public func get(key: DialogProtocols.DialogFeatureFlag.Key, level: DialogFeatureFlags.FeatureFlagService.FeatureFlagLevel) -> RxSwift.Observable<DialogProtocols.DialogFeatureFlag?>
  @objc deinit
}
public enum DialogFeatureFlagStorageServiceEntrySource : Swift.Int {
  case user
  case server
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol DialogFeatureFlagStorageServiceProtocol {
  func store(flag: DialogProtocols.DialogFeatureFlag, source: DialogFeatureFlags.DialogFeatureFlagStorageServiceEntrySource) -> RxSwift.Completable
  func observe(key: DialogProtocols.DialogFeatureFlag.Key, source: DialogFeatureFlags.DialogFeatureFlagStorageServiceEntrySource) -> RxSwift.Observable<DialogProtocols.DialogFeatureFlag?>
  func maxUserFlagClock() -> RxSwift.Single<DialogProtocols.DialogFeatureFlag.Clock?>
}
final public class DialogFeatureFlagStorageService : DialogFeatureFlags.DialogFeatureFlagStorageServiceProtocol {
  public class AbstractEntry : Swift.Codable, DialogStorage.DialogStoragableProtocol {
    open class var sublclassDatabaseName: Swift.String {
      get
    }
    public static var databaseTableName: Swift.String {
      get
    }
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case key, value, clock
      public typealias RawValue = Swift.String
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
      public init?(stringValue: Swift.String)
      public var intValue: Swift.Int? {
        get
      }
      public init?(intValue: Swift.Int)
    }
    final public let flag: DialogProtocols.DialogFeatureFlag
    public init(flag: DialogProtocols.DialogFeatureFlag)
    public func encode(to encoder: Swift.Encoder) throws
    required public init(from decoder: Swift.Decoder) throws
    public func requireToCreateTable(in database: GRDB.Database) throws
    @objc deinit
  }
  @_inheritsConvenienceInitializers final public class ClientCustomEntry : DialogFeatureFlags.DialogFeatureFlagStorageService.AbstractEntry {
    override final public class var sublclassDatabaseName: Swift.String {
      get
    }
    @objc deinit
    override public init(flag: DialogProtocols.DialogFeatureFlag)
    required public init(from decoder: Swift.Decoder) throws
  }
  @_inheritsConvenienceInitializers final public class ServerEntry : DialogFeatureFlags.DialogFeatureFlagStorageService.AbstractEntry {
    override final public class var sublclassDatabaseName: Swift.String {
      get
    }
    @objc deinit
    override public init(flag: DialogProtocols.DialogFeatureFlag)
    required public init(from decoder: Swift.Decoder) throws
  }
  final public let storage: DialogStorage.DialogStorageServiceProtocol
  public init(storage: DialogStorage.DialogStorageServiceProtocol)
  final public func store(flag: DialogProtocols.DialogFeatureFlag, source: DialogFeatureFlags.DialogFeatureFlagStorageServiceEntrySource) -> RxSwift.Completable
  final public func observe(key: DialogProtocols.DialogFeatureFlag.Key, source: DialogFeatureFlags.DialogFeatureFlagStorageServiceEntrySource) -> RxSwift.Observable<DialogProtocols.DialogFeatureFlag?>
  final public func fetch(key: DialogProtocols.DialogFeatureFlag.Key, source: DialogFeatureFlags.DialogFeatureFlagStorageServiceEntrySource) -> RxSwift.Single<DialogProtocols.DialogFeatureFlag?>
  final public func maxUserFlagClock() -> RxSwift.Single<DialogProtocols.DialogFeatureFlag.Clock?>
  @objc deinit
}
public protocol DialogFeatureFlagValueConverterProtocol {
  associatedtype ValueType
  func convertToValue(from: Swift.String) -> Self.ValueType
  func convertFrom(value: Self.ValueType) -> Swift.String
}
public struct Converters {
  public static let `default`: DialogFeatureFlags.Converters
  public var bool: DialogFeatureFlags.DialogFeatureFlagValueBoolConverter
  public var int: DialogFeatureFlags.DialogFeatureFlagValueIntConverter
}
@_hasMissingDesignatedInitializers final public class DialogFeatureFlagValueBoolConverter : DialogFeatureFlags.DialogFeatureFlagValueConverterProtocol {
  public static let trueString: Swift.String
  public static let falseString: Swift.String
  public typealias ValueType = Swift.Bool
  final public func convertFrom(value: DialogFeatureFlags.DialogFeatureFlagValueBoolConverter.ValueType) -> Swift.String
  final public func convertToValue(from: Swift.String) -> DialogFeatureFlags.DialogFeatureFlagValueBoolConverter.ValueType
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DialogFeatureFlagValueIntConverter : DialogFeatureFlags.DialogFeatureFlagValueConverterProtocol {
  public typealias ValueType = Swift.Int
  final public func convertFrom(value: DialogFeatureFlags.DialogFeatureFlagValueIntConverter.ValueType) -> Swift.String
  final public func convertToValue(from: Swift.String) -> DialogFeatureFlags.DialogFeatureFlagValueIntConverter.ValueType
  @objc deinit
}
final public class DialogFeatureFlagAccessor<ValueType> {
  public typealias ValueType = ValueType
  public init<Converter>(key: DialogProtocols.DialogFeatureFlag.Key, service: DialogFeatureFlags.FeatureFlagServiceProtocol, converter: Converter) where ValueType == Converter.ValueType, Converter : DialogFeatureFlags.DialogFeatureFlagValueConverterProtocol
  final public func value() -> RxSwift.Observable<ValueType?>
  final public func setValue(value: ValueType) -> RxSwift.Completable
  @objc deinit
}
extension DialogFeatureFlags.FeatureFlagService.FeatureFlagLevel : Swift.Equatable {}
extension DialogFeatureFlags.FeatureFlagService.FeatureFlagLevel : Swift.Hashable {}
extension DialogFeatureFlags.FeatureFlagService.FeatureFlagLevel : Swift.RawRepresentable {}
extension DialogFeatureFlags.DialogFeatureFlagStorageServiceEntrySource : Swift.Equatable {}
extension DialogFeatureFlags.DialogFeatureFlagStorageServiceEntrySource : Swift.Hashable {}
extension DialogFeatureFlags.DialogFeatureFlagStorageServiceEntrySource : Swift.RawRepresentable {}
extension DialogFeatureFlags.DialogFeatureFlagStorageService.AbstractEntry.CodingKeys : Swift.Equatable {}
extension DialogFeatureFlags.DialogFeatureFlagStorageService.AbstractEntry.CodingKeys : Swift.Hashable {}
extension DialogFeatureFlags.DialogFeatureFlagStorageService.AbstractEntry.CodingKeys : Swift.RawRepresentable {}
