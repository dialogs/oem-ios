// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DialogSettingsConfigService
import DialogMessaging
import DialogNetService
import DialogProtocols
import DialogSDK_GRPC
@_exported import DialogSettingsConfigService
import DialogStorage
import DialogSwiftGRPCExtra
import Foundation
import GRDB
import RxSwift
import Swift
import SwiftGRPC
final public class DialogGlobalNotificationsSettingsConfigService : DialogProtocols.GlobalNotificationsSettingsConfigServiceProtocol {
  final public var change: RxSwift.AnyObserver<(DialogProtocols.DialogNotificationSetting, Swift.Bool)>
  final public var state: RxSwift.Observable<[DialogProtocols.DialogNotificationSetting : Swift.Bool]>
  public init(configService: DialogProtocols.SettingsConfigServiceProtocol)
  @objc deinit
}
final public class SettingsConfigService : DialogProtocols.SettingsConfigServiceProtocol {
  final public let config: RxSwift.Observable<DialogProtocols.SettingsConfigState>
  final public var change: RxSwift.AnyObserver<DialogProtocols.SettingsConfigItem>
  public init(storage: DialogStorage.DialogStorageServiceProtocol, taskPerformer: DialogSettingsConfigService.SettingsConfigRemoteTaskPerformerProtocol, eventBus: DialogProtocols.EventBusServiceProtocol)
  final public func update(_ item: DialogProtocols.SettingsConfigItem) -> RxSwift.Completable
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class GlobalBoolSettingHelper {
  public static func resolveSetting<T>(item: DialogProtocols.SettingsConfigItem, parseIn type: T.Type) -> (T, Swift.Bool)? where T : DialogProtocols.KeyParameterConformable
  public static func resolveSetting<T>(setting: T, value: Swift.Bool) -> DialogProtocols.SettingsConfigItem where T : DialogProtocols.KeyParameterConformable
  @objc deinit
}
extension SettingsConfigItem : DialogStorage.DialogStoragableProtocol {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case key
    case value
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func requireToCreateTable(in database: GRDB.Database) throws
}
extension SettingsConfigItem {
  public static func select(setting: DialogProtocols.DialogNotificationSetting) -> (Swift.String, GRDB.StatementArguments?)
}
public protocol SettingsConfigRemoteTaskPerformerProtocol {
  var loadConfig: RxSwift.Observable<DialogProtocols.SettingsConfigState> { get }
  var configItemUpdates: RxSwift.Observable<DialogProtocols.SettingsConfigItem> { get }
  var requestUpdate: RxSwift.AnyObserver<DialogProtocols.SettingsConfigItem> { get }
  func update(_ item: DialogProtocols.SettingsConfigItem) -> RxSwift.Completable
}
final public class SettingsConfigRemoteTaskPerformer : DialogSettingsConfigService.SettingsConfigRemoteTaskPerformerProtocol {
  final public var loadConfig: RxSwift.Observable<DialogProtocols.SettingsConfigState>
  final public var configItemUpdates: RxSwift.Observable<DialogProtocols.SettingsConfigItem>
  final public let seqUpdateService: DialogMessaging.DialogSeqUpdatesServiceProtocol
  final public let requestUpdate: RxSwift.AnyObserver<DialogProtocols.SettingsConfigItem>
  public init(seqUpdateService: DialogMessaging.DialogSeqUpdatesServiceProtocol, channel: DialogProtocols.DialogChannelServiceProtocol, netService: DialogNetService.NetServiceProtocol, taskProvider: DialogNetService.GRPCTaskProviderProtocol)
  final public func update(_ item: DialogProtocols.SettingsConfigItem) -> RxSwift.Completable
  @objc deinit
}
extension DialogProtocols.SettingsConfigItem.CodingKeys : Swift.Equatable {}
extension DialogProtocols.SettingsConfigItem.CodingKeys : Swift.Hashable {}
extension DialogProtocols.SettingsConfigItem.CodingKeys : Swift.RawRepresentable {}
