// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DialogMiniAppService
@_exported import DialogMiniAppService
import DialogNetService
import DialogProtocols
import DialogSDK_GRPC
import DialogStorage
import GRDB
import RxSwift
import Swift
extension DialogMiniApp : GRDB.MutablePersistableRecord {
  public static let persistenceConflictPolicy: GRDB.PersistenceConflictPolicy
}
extension DialogMiniApp : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension DialogMiniAppState : DialogStorage.DialogStoragableProtocol {
  public func requireToCreateTable(in database: GRDB.Database) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
final public class DialogMiniAppService : DialogProtocols.DialogMiniAppServiceProtocol {
  public init(channelService: DialogProtocols.DialogChannelServiceProtocol, eventBusService: DialogProtocols.EventBusServiceProtocol, storageService: DialogStorage.DialogStorageServiceProtocol)
  @objc deinit
}
extension DialogMiniAppState : Swift.Equatable {
  public static func == (lhs: DialogProtocols.DialogMiniAppState, rhs: DialogProtocols.DialogMiniAppState) -> Swift.Bool
}
extension DialogMiniAppState {
  public func applyingCustom(newState: DialogProtocols.DialogMiniAppState) -> DialogProtocols.DialogMiniAppState
}
