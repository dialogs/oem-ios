// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DialogStorage
import Cache
import DialogProtocols
@_exported import DialogStorage
import Foundation
import GRDB
import RxSwift
import Swift
import SwiftProtobuf
public protocol DialogCacheableProtocol : Swift.Decodable, Swift.Encodable {
  var uid: Swift.String? { get }
}
public enum StorageRequestType {
  case write
  case read
  public static func == (a: DialogStorage.StorageRequestType, b: DialogStorage.StorageRequestType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct DialogCacheRequest<T> where T : DialogStorage.DialogCacheableProtocol {
  public let entity: T
  public let type: DialogStorage.StorageRequestType
  public init(entity: T, type: DialogStorage.StorageRequestType)
}
public enum StorageResultType {
  case successfull
  case failed(error: Swift.Error)
}
public struct DialogCacheResult<T> where T : DialogStorage.DialogCacheableProtocol {
  public let entity: T
  public let type: DialogStorage.StorageResultType
  public let filePath: Swift.String?
  public init(entity: T, type: DialogStorage.StorageResultType, filePath: Swift.String?)
}
final public class DialogCacheService : DialogStorage.DialogCacheServiceProtocol {
  public init(storageName: Swift.String) throws
  final public func perform<T>(request: DialogStorage.DialogCacheRequest<T>) -> RxSwift.Observable<DialogStorage.DialogCacheResult<T>> where T : DialogStorage.DialogCacheableProtocol
  @objc deinit
}
public protocol DialogCacheServiceProtocol {
  func perform<T>(request: DialogStorage.DialogCacheRequest<T>) -> RxSwift.Observable<DialogStorage.DialogCacheResult<T>> where T : DialogStorage.DialogCacheableProtocol
  init(storageName: Swift.String) throws
}
public protocol DialogStoragableProtocol : GRDB.FetchableRecord, GRDB.PersistableRecord, Swift.Decodable, Swift.Encodable {
  func requireToCreateTable(in database: GRDB.Database) throws
}
extension DialogStoragableProtocol {
  public var tableName: Swift.String {
    get
  }
}
final public class DialogStorageBlob<Value> : DialogStorage.DialogStoragableProtocol, GRDB.TableRecord where Value : Swift.Decodable, Value : Swift.Encodable {
  final public let key: Swift.String
  final public let value: Value
  final public let tableName: Swift.String
  public static var databaseTableName: Swift.String {
    get
  }
  public init(_ value: Value, key: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  final public func requireToCreateTable(in database: GRDB.Database) throws
  @objc deinit
}
public struct DialogStorageBlobKey : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public let rawValue: DialogStorage.DialogStorageBlobKey.RawValue
  public init(rawValue: DialogStorage.DialogStorageBlobKey.RawValue)
  public init(_ rawValue: DialogStorage.DialogStorageBlobKey.RawValue)
}
public protocol DialogStorageDispatcherProtocol {
  func storage(key: Swift.String, version: Swift.String, useEncryptionIfPossible: Swift.Bool) throws -> DialogStorage.DialogStorageServiceProtocol
  func removeStorage(key: Swift.String) throws
}
extension DialogStorageDispatcherProtocol {
  public func storage(key: Swift.String, version: Swift.String, useEncryptionIfPossible: Swift.Bool = true) throws -> DialogStorage.DialogStorageServiceProtocol
}
extension DialogStorageDispatcherProtocol {
  public func storage(user: DialogProtocols.AuthUserEntry, key: Swift.String? = nil, version: Swift.String) throws -> DialogStorage.DialogStorageServiceProtocol
  public func removeStorage(user: DialogProtocols.AuthUserEntry, key: Swift.String? = nil) throws
}
public protocol StorageBackgroundTaskProtocol {
  func end()
}
public protocol BackgroundTaskProviderProtocol {
  var begin: () -> DialogStorage.StorageBackgroundTaskProtocol { get }
}
final public class BackgroundTaskProvider : DialogStorage.BackgroundTaskProviderProtocol {
  final public let begin: () -> DialogStorage.StorageBackgroundTaskProtocol
  public init(begin: @escaping () -> DialogStorage.StorageBackgroundTaskProtocol)
  @objc deinit
}
final public class DialogStorageDispatcher : DialogStorage.DialogStorageDispatcherProtocol, DialogProtocols.StorageManagerProtocol {
  public init(using directory: DialogStorage.DialogStorageDispatcher.Directory = .applicationSupport, secretKeyProvider: DialogProtocols.DialogSecretKeyProviderProtocol, backgroundTaskProvider: DialogStorage.BackgroundTaskProviderProtocol? = nil)
  final public let directory: DialogStorage.DialogStorageDispatcher.Directory
  final public func prepareStorage(user: DialogProtocols.AuthUserEntry, version: Swift.String) throws
  final public func clearStorage(user: DialogProtocols.AuthUserEntry) throws
  final public func storage(key: Swift.String, version: Swift.String, useEncryptionIfPossible: Swift.Bool = true) throws -> DialogStorage.DialogStorageServiceProtocol
  final public func removeStorage(key: Swift.String) throws
  @objc deinit
}
extension DialogStorageDispatcher {
  public enum Directory {
    case applicationSupport
    case appGroup(withIdentifier: Swift.String)
  }
}
extension DialogStorageServiceProtocol {
  public func writeBlobValue<BlobValue>(_ value: BlobValue, key: DialogStorage.DialogStorageBlobKey) -> RxSwift.Observable<BlobValue> where BlobValue : Swift.Decodable, BlobValue : Swift.Encodable
  public func readBlobValue<BlobValue>(ofType: BlobValue.Type, key: DialogStorage.DialogStorageBlobKey) -> RxSwift.Observable<BlobValue?> where BlobValue : Swift.Decodable, BlobValue : Swift.Encodable
  public func readBlobValues<BlobValue>(ofType: BlobValue.Type, keys: [DialogStorage.DialogStorageBlobKey]) -> RxSwift.Observable<[BlobValue]> where BlobValue : Swift.Decodable, BlobValue : Swift.Encodable
  public func observeBlobValue<BlobValue>(ofType: BlobValue.Type, key: DialogStorage.DialogStorageBlobKey) -> RxSwift.Observable<BlobValue?> where BlobValue : Swift.Decodable, BlobValue : Swift.Encodable
  public func writeProtobufMessage<M>(_ message: M, key: DialogStorage.DialogStorageBlobKey) -> RxSwift.Observable<M> where M : SwiftProtobuf.Message
  public func readProtobufMessage<M>(ofType: M.Type, key: DialogStorage.DialogStorageBlobKey) -> RxSwift.Observable<M?> where M : SwiftProtobuf.Message
  public func observeProtobufMessage<M>(ofType: M.Type, key: DialogStorage.DialogStorageBlobKey) -> RxSwift.Observable<M?> where M : SwiftProtobuf.Message
}
final public class DialogStorageService : DialogStorage.DialogStorageServiceProtocol, Swift.CustomStringConvertible {
  final public func write<T>(item: T) -> RxSwift.Observable<T> where T : DialogStorage.DialogStoragableProtocol
  final public func write<T>(items: [T]) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  final public func writeSync<T>(items: [T]) -> [T] where T : DialogStorage.DialogStoragableProtocol
  final public func remove<T>(item: T, with key: [Swift.String : GRDB.DatabaseValueConvertible?]) -> RxSwift.Observable<Swift.Bool> where T : DialogStorage.DialogStoragableProtocol
  final public func removeAll<T>(type: T.Type, with keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) -> RxSwift.Observable<Swift.Int> where T : DialogStorage.DialogStoragableProtocol
  final public func removeAll<T>(type: T.Type) -> RxSwift.Observable<Swift.Int> where T : DialogStorage.DialogStoragableProtocol
  final public func removeAll<T>(type: T.Type, filter predicate: GRDB.SQLExpressible) -> RxSwift.Observable<Swift.Int> where T : DialogStorage.DialogStoragableProtocol
  final public func update<T>(item: T, columns: Swift.Set<Swift.String>) -> RxSwift.Observable<Swift.Void> where T : DialogStorage.DialogStoragableProtocol
  final public func fetch<T>(type: T.Type, filter predicate: (Swift.String, GRDB.StatementArguments?)?) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  final public func combineFetchOne<T>(type: T.Type, filter predicates: [(Swift.String, GRDB.StatementArguments?)]) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  final public func combineFetchOne<T>(type: T.Type, sqls: [GRDB.SQLExpressible]) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  final public func fetchOne<Entry, ValueType>(request: GRDB.QueryInterfaceRequest<Entry>) -> RxSwift.Single<ValueType?> where Entry : DialogStorage.DialogStoragableProtocol, ValueType : GRDB.DatabaseValueConvertible
  final public func fetchOne<T>(type: T.Type, filter: GRDB.SQLExpressible?) -> RxSwift.Observable<T?> where T : DialogStorage.DialogStoragableProtocol
  final public func syncFetchOne<T>(type: T.Type, filter: GRDB.SQLExpressible) -> T? where T : DialogStorage.DialogStoragableProtocol
  final public func syncFetchOne<T>(type: T.Type, filter predicate: (Swift.String, GRDB.StatementArguments?)?) -> T? where T : DialogStorage.DialogStoragableProtocol
  final public func observeAll<T>(type: T.Type) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  final public func observe<T>(type: T.Type, sql: (Swift.String, GRDB.StatementArguments?)) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  final public var targetDatabasePath: Swift.String {
    get
  }
  public init(path: Swift.String, secretData: DialogProtocols.DialogSecretData?, backgroundTaskProvider: DialogStorage.BackgroundTaskProviderProtocol? = nil) throws
  final public var description: Swift.String {
    get
  }
  @objc deinit
}
public protocol DialogStorageServiceProtocol {
  func write<T>(item: T) -> RxSwift.Observable<T> where T : DialogStorage.DialogStoragableProtocol
  func write<T>(items: [T]) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  func writeSync<T>(items: [T]) -> [T] where T : DialogStorage.DialogStoragableProtocol
  func remove<T>(item: T, with key: [Swift.String : GRDB.DatabaseValueConvertible?]) -> RxSwift.Observable<Swift.Bool> where T : DialogStorage.DialogStoragableProtocol
  func removeAll<T>(type: T.Type, with keys: [[Swift.String : GRDB.DatabaseValueConvertible?]]) -> RxSwift.Observable<Swift.Int> where T : DialogStorage.DialogStoragableProtocol
  func removeAll<T>(type: T.Type) -> RxSwift.Observable<Swift.Int> where T : DialogStorage.DialogStoragableProtocol
  func removeAll<T>(type: T.Type, filter predicate: GRDB.SQLExpressible) -> RxSwift.Observable<Swift.Int> where T : DialogStorage.DialogStoragableProtocol
  func update<T>(item: T, columns: Swift.Set<Swift.String>) -> RxSwift.Observable<Swift.Void> where T : DialogStorage.DialogStoragableProtocol
  func observeAll<T>(type: T.Type) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  func observe<T>(type: T.Type, sql: (Swift.String, GRDB.StatementArguments?)) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  func fetch<T>(type: T.Type, filter predicate: (Swift.String, GRDB.StatementArguments?)?) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  func combineFetchOne<T>(type: T.Type, filter predicates: [(Swift.String, GRDB.StatementArguments?)]) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  func combineFetchOne<T>(type: T.Type, sqls: [GRDB.SQLExpressible]) -> RxSwift.Observable<[T]> where T : DialogStorage.DialogStoragableProtocol
  func fetchOne<T>(type: T.Type, filter predicate: GRDB.SQLExpressible?) -> RxSwift.Observable<T?> where T : DialogStorage.DialogStoragableProtocol
  func fetchOne<Entry, ValueType>(request: GRDB.QueryInterfaceRequest<Entry>) -> RxSwift.Single<ValueType?> where Entry : DialogStorage.DialogStoragableProtocol, ValueType : GRDB.DatabaseValueConvertible
  func syncFetchOne<T>(type: T.Type, filter: GRDB.SQLExpressible) -> T? where T : DialogStorage.DialogStoragableProtocol
  func syncFetchOne<T>(type: T.Type, filter predicate: (Swift.String, GRDB.StatementArguments?)?) -> T? where T : DialogStorage.DialogStoragableProtocol
}
extension DialogStorageServiceProtocol {
  public func fetchOne<Entry, ValueType>(request: GRDB.QueryInterfaceRequest<Entry>, valueType: ValueType.Type) -> RxSwift.Single<ValueType?> where Entry : DialogStorage.DialogStoragableProtocol, ValueType : GRDB.DatabaseValueConvertible
}
final public class ProtobufMessageCodableWrapper<M> : Swift.Codable where M : SwiftProtobuf.Message {
  public init(_ message: M)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public protocol SelfTableRepresentable {
  associatedtype ID : DialogStorage.TableIdRepresentable
  var tableId: DialogStorage.TableIdRepresentable { get }
}
extension DialogStorageServiceProtocol {
  public func writeMessagesToSelfTable<M>(_ messages: [M]) -> RxSwift.Observable<[M]> where M : DialogStorage.SelfTableRepresentable, M : SwiftProtobuf.Message
  public func readMessagesFromSelfTable<M>(ofType type: M.Type, keys: [M.ID]) -> RxSwift.Observable<[M]> where M : DialogStorage.SelfTableRepresentable, M : SwiftProtobuf.Message
}
public protocol TableIdRepresentable : GRDB.DatabaseValueConvertible, Swift.Decodable, Swift.Encodable {
  static var GRDBColumnTypeRepresentation: GRDB.Database.ColumnType { get }
  var tableValueStringRepresentation: Swift.String { get }
}
extension String : DialogStorage.TableIdRepresentable {
  public static let GRDBColumnTypeRepresentation: GRDB.Database.ColumnType
  public var tableValueStringRepresentation: Swift.String {
    get
  }
}
extension Int : DialogStorage.TableIdRepresentable {
  public static let GRDBColumnTypeRepresentation: GRDB.Database.ColumnType
  public var tableValueStringRepresentation: Swift.String {
    get
  }
}
extension Int32 : DialogStorage.TableIdRepresentable {
  public static let GRDBColumnTypeRepresentation: GRDB.Database.ColumnType
  public var tableValueStringRepresentation: Swift.String {
    get
  }
}
extension Int64 : DialogStorage.TableIdRepresentable {
  public static let GRDBColumnTypeRepresentation: GRDB.Database.ColumnType
  public var tableValueStringRepresentation: Swift.String {
    get
  }
}
extension DialogStorage.StorageRequestType : Swift.Equatable {}
extension DialogStorage.StorageRequestType : Swift.Hashable {}
