// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DialogPasscodeUI
import DialogPasscode
@_exported import DialogPasscodeUI
import Foundation
import LocalAuthentication
import RxCocoa
import RxSwift
import SnapKit
import Swift
import UIKit
import UIKit/*.UIColor*/
public struct BlockInterval {
}
extension BlockInterval {
  public static var blockStep: Swift.UInt
}
public protocol BlurOverlayProtocol : AnyObject {
  var targetView: UIKit.UIView? { get set }
  static var animationDuration: Foundation.TimeInterval { get set }
}
final public class BlurOverlay : DialogPasscodeUI.BlurOverlayProtocol {
  public init()
  final public var targetView: UIKit.UIView?
  public static var animationDuration: Swift.Double
  @objc deinit
}
extension Bundle {
  public static var dialogBundle: Foundation.Bundle
}
public enum LockState : Swift.Equatable {
  case locked(manually: Swift.Bool)
  case unlocked
  case loggedOut
  public var isLocked: Swift.Bool {
    get
  }
  public static func == (lhs: DialogPasscodeUI.LockState, rhs: DialogPasscodeUI.LockState) -> Swift.Bool
}
public class PasscodeCoreBuilder : DialogPasscodeUI.PasscodeCoreBuilderProtocol {
  public init(with service: DialogPasscodeUI.PasscodeServiceProtocol)
  public func creationMenu() -> UIKit.UIViewController
  public func lockButton(with text: Swift.String) -> UIKit.UIView
  public func startPage(with creationData: DialogPasscodeUI.StartPageCreationData) -> UIKit.UIViewController?
  @objc deinit
}
public protocol PasscodeCoreBuilderProtocol {
  func creationMenu() -> UIKit.UIViewController
  func lockButton(with text: Swift.String) -> UIKit.UIView
  func startPage(with creationData: DialogPasscodeUI.StartPageCreationData) -> UIKit.UIViewController?
}
public enum PasscodeCreationState : Swift.Equatable {
  case newToSave(Swift.String)
  case validationFailed
  case reset
  public static func == (a: DialogPasscodeUI.PasscodeCreationState, b: DialogPasscodeUI.PasscodeCreationState) -> Swift.Bool
}
final public class PasscodeService : DialogPasscodeUI.PasscodeServiceProtocol {
  public init(with settings: DialogPasscode.Settings)
  final public var settings: DialogPasscode.Settings {
    get
  }
  final public var newPasscodeHash: RxSwift.AnyObserver<RxSwift.BehaviorSubject<Swift.String?>.Element> {
    get
    set
  }
  final public var newLockState: RxSwift.AnyObserver<RxSwift.BehaviorSubject<DialogPasscodeUI.LockState>.Element> {
    get
    set
  }
  final public var passcodeHash: RxSwift.Observable<Swift.String?> {
    get
    set
  }
  final public var lockState: RxSwift.Observable<DialogPasscodeUI.LockState> {
    get
    set
  }
  final public func reset()
  @objc deinit
}
public protocol PasscodeServiceProtocol {
  var newPasscodeHash: RxSwift.AnyObserver<Swift.String?> { get }
  var newLockState: RxSwift.AnyObserver<DialogPasscodeUI.LockState> { get }
  var lockState: RxSwift.Observable<DialogPasscodeUI.LockState> { get }
  var passcodeHash: RxSwift.Observable<Swift.String?> { get }
  var settings: DialogPasscode.Settings { get }
  func reset()
}
public struct StartPageCreationData {
  public init(style: RxCocoa.Driver<DialogPasscodeUI.Style> = .just(Style(tintColor: .systemGray)), localizedBottomMessage: Swift.String = "", logoImage: UIKit.UIImage = UIImage(), maxNumberOfFailedLoginAttempts: Swift.UInt8 = 4, logoutAction: (() -> Swift.Void)? = nil)
  public var style: RxCocoa.Driver<DialogPasscodeUI.Style>
  public var localizedBottomMessage: Swift.String
  public var logoImage: UIKit.UIImage
  public var maxNumberOfFailedLoginAttempts: Swift.UInt8
  public var logoutAction: (() -> Swift.Void)?
}
public struct Style {
  public init(tintColor: UIKit.UIColor)
}
